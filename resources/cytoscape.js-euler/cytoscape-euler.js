var t={41:t=>{t.exports=Object.freeze({animate:!0,refresh:10,maxIterations:1e3,maxSimulationTime:4e3,ungrabifyWhileSimulating:!1,fit:!0,padding:30,boundingBox:void 0,ready:function(){},stop:function(){},randomize:!1,infinite:!1})},44:(t,e,o)=>{const s=o(298);let n=function(t){t&&t("layout","euler",s)};"undefined"!=typeof cytoscape&&n(cytoscape),t.exports=n},58:t=>{t.exports=function(){this.body=null,this.quad0=null,this.quad1=null,this.quad2=null,this.quad3=null,this.mass=0,this.massX=0,this.massY=0,this.left=0,this.top=0,this.bottom=0,this.right=0}},106:t=>{t.exports={applyDrag:function(t,e){let o;o=null!=e?e:null!=t.dragCoeff?t.dragCoeff:.02,t.force.x-=o*t.velocity.x,t.force.y-=o*t.velocity.y}}},295:(t,e,o)=>{const s=o(999),n=o(41),r=o(666),{setInitialPositionState:a,refreshPositions:i,getNodePositionData:l}=o(460),{multitick:u}=o(570);t.exports=class{constructor(t){let e=this.options=s({},n,t),o=e.eles.nodes();if(!e.randomize){o=o.sort((t,e)=>t.position().x-e.position().x);const t={x:0,y:0},s={};o.forEach(o=>{Object.assign(s,o.position()),Math.abs(t.x-s.x)<e.theta&&Math.abs(t.y-s.y)<e.theta&&o.position({x:100*Math.random(),y:100*Math.random()}),Object.assign(t,s)})}let r=this.state=s({},e,{layout:this,nodes:o,edges:e.eles.edges(),tickIndex:0,firstUpdate:!0});r.animateEnd=e.animate&&"end"===e.animate,r.animateContinuously=e.animate&&!r.animateEnd}run(){let t=this,e=this.state;if(e.tickIndex=0,e.firstUpdate=!0,e.startTime=Date.now(),e.running=!0,e.currentBoundingBox=r(e.boundingBox,e.cy),e.ready&&t.one("ready",e.ready),e.stop&&t.one("stop",e.stop),e.nodes.forEach(t=>a(t,e)),t.prerun(e),e.animateContinuously){let o=t=>{e.ungrabifyWhileSimulating&&(l(t,e).grabbable=t.grabbable())&&t.ungrabify()},s=t=>{e.ungrabifyWhileSimulating&&l(t,e).grabbable&&t.grabify()},n=t=>l(t,e).grabbed=t.grabbed(),r=function({target:t}){n(t)},a=r,c=function({target:t}){let o=l(t,e),s=t.position();o.x=s.x,o.y=s.y},p=t=>{t.on("grab",r),t.on("free",a),t.on("drag",c)},f=t=>{t.removeListener("grab",r),t.removeListener("free",a),t.removeListener("drag",c)},d=()=>{e.fit&&e.animateContinuously&&e.cy.fit(e.padding)},h=()=>{i(e.nodes,e),d(),requestAnimationFrame(y)},y=function(){u(e,h,m)},m=()=>{i(e.nodes,e),d(),e.nodes.forEach(t=>{s(t),f(t)}),e.running=!1,t.emit("layoutstop")};t.emit("layoutstart"),e.nodes.forEach(t=>{o(t),p(t)}),y()}else{let t=!1,o=()=>{},s=()=>t=!0;for(;!t;)u(e,o,s);e.eles.layoutPositions(this,e,t=>{let o=l(t,e);return{x:o.x,y:o.y}})}return t.postrun(e),this}prerun(){}postrun(){}tick(){}stop(){return this.state.running=!1,this}destroy(){return this}}},298:(t,e,o)=>{const s=o(295),n=o(999),r=o(606),{tick:a}=o(493),{makeQuadtree:i}=o(380),{makeBody:l}=o(480),{makeSpring:u}=o(629),c=t=>t.isParent(),p=t=>!c(t),f=t=>c(t.source())||c(t.target()),d=t=>!f(t),h=t=>t.scratch("euler").body,y=t=>c(t)?t.descendants().filter(p):t,m=t=>{let e=t.scratch("euler");return e||(e={},t.scratch("euler",e)),e},x=(t,e)=>"function"==typeof t?t(e):t;t.exports=class extends s{constructor(t){super(n({},r,t))}prerun(t){let e=t;e.quadtree=i();let o=e.bodies=[];e.nodes.filter(t=>p(t)).forEach(t=>{let s=m(t),n=l({pos:{x:s.x,y:s.y},mass:x(e.mass,t),locked:s.locked});n._cyNode=t,s.body=n,n._scratch=s,o.push(n)});let s=e.springs=[];e.edges.filter(d).forEach(t=>{let o=u({source:h(t.source()),target:h(t.target()),length:x(e.springLength,t),coeff:x(e.springCoeff,t)});o._cyEdge=t;let n=m(t);o._scratch=n,n.spring=o,s.push(o)}),e.edges.filter(f).forEach(t=>{let o=y(t.source()),n=y(t.target());o=[o[0]],n=[n[0]],o.forEach(o=>{n.forEach(n=>{s.push(u({source:h(o),target:h(n),length:x(e.springLength,t),coeff:x(e.springCoeff,t)}))})})})}tick(t){return a(t)<=t.movementThreshold}}},355:t=>{function e(){this.stack=[],this.popIdx=0}function o(t,e){this.node=t,this.body=e}t.exports=e,e.prototype={isEmpty:function(){return 0===this.popIdx},push:function(t,e){let s=this.stack[this.popIdx];s?(s.node=t,s.body=e):this.stack[this.popIdx]=new o(t,e),++this.popIdx},pop:function(){if(this.popIdx>0)return this.stack[--this.popIdx]},reset:function(){this.popIdx=0}}},361:t=>{t.exports={integrate:function(t,e){var o,s=0,n=0,r=0,a=0,i=t.length;if(0===i)return 0;for(o=0;o<i;++o){var l=t[o],u=e/l.mass;if(!l.grabbed){l.locked?(l.velocity.x=0,l.velocity.y=0):(l.velocity.x+=u*l.force.x,l.velocity.y+=u*l.force.y);var c=l.velocity.x,p=l.velocity.y,f=Math.sqrt(c*c+p*p);f>1&&(l.velocity.x=c/f,l.velocity.y=p/f),s=e*l.velocity.x,r=e*l.velocity.y,l.pos.x+=s,l.pos.y+=r,n+=Math.abs(s),a+=Math.abs(r)}}return(n*n+a*a)/i}}},380:(t,e,o)=>{const s=o(58),n=o(355),r=(t,e)=>{let o=Math.abs(t.x-e.x),s=Math.abs(t.y-e.y);return o<1e-8&&s<1e-8};function a(t,e){return 0===e?t.quad0:1===e?t.quad1:2===e?t.quad2:3===e?t.quad3:null}function i(t,e,o){0===e?t.quad0=o:1===e?t.quad1=o:2===e?t.quad2=o:3===e&&(t.quad3=o)}t.exports={makeQuadtree:function(){let t=[],e=new n,o=[],l=0,u=c();function c(){let t=o[l];return t?(t.quad0=null,t.quad1=null,t.quad2=null,t.quad3=null,t.body=null,t.mass=t.massX=t.massY=0,t.left=t.right=t.top=t.bottom=0):(t=new s,o[l]=t),++l,t}function p(t){for(e.reset(),e.push(u,t);!e.isEmpty();){let t=e.pop(),o=t.node,s=t.body;if(o.body){let t=o.body;if(o.body=null,r(t.pos,s.pos)){let e=3;do{let s=Math.random(),n=(o.right-o.left)*s,r=(o.bottom-o.top)*s;t.pos.x=o.left+n,t.pos.y=o.top+r,e-=1}while(e>0&&r(t.pos,s.pos));if(0===e&&r(t.pos,s.pos))return}e.push(o,t),e.push(o,s)}else{let t=s.pos.x,n=s.pos.y;o.mass=o.mass+s.mass,o.massX=o.massX+s.mass*t,o.massY=o.massY+s.mass*n;let r=0,l=o.left,u=(o.right+l)/2,p=o.top,f=(o.bottom+p)/2;t>u&&(r+=1,l=u,u=o.right),n>f&&(r+=2,p=f,f=o.bottom);let d=a(o,r);d?e.push(d,s):(d=c(),d.left=l,d.top=p,d.right=u,d.bottom=f,d.body=s,i(o,r,d))}}}return{insertBodies:function(t){if(0===t.length)return;let e,o=Number.MAX_VALUE,s=Number.MAX_VALUE,n=Number.MIN_VALUE,r=Number.MIN_VALUE,a=t.length;for(e=a;e--;){let a=t[e].pos.x,i=t[e].pos.y;a<o&&(o=a),a>n&&(n=a),i<s&&(s=i),i>r&&(r=i)}let i=n-o,f=r-s;for(i>f?r=s+i:n=o+f,l=0,u=c(),u.left=o,u.right=n,u.top=s,u.bottom=r,e=a-1,e>=0&&(u.body=t[e]);e--;)p(t[e])},updateBodyForce:function(e,o,s,n){let r,a,i,l,c=t,p=0,f=0,d=1,h=0,y=1;c[0]=u,(t=>{t.x=0,t.y=0})(e.force);let m=-e.pos.x,x=-e.pos.y,g=Math.sqrt(m*m+x*x),b=e.mass*n/g;for(p+=b*m,f+=b*x;d;){let t=c[h],n=t.body;d-=1,h+=1;let u=n!==e;n&&u?(a=n.pos.x-e.pos.x,i=n.pos.y-e.pos.y,l=Math.sqrt(a*a+i*i),0===l&&(a=(Math.random()-.5)/50,i=(Math.random()-.5)/50,l=Math.sqrt(a*a+i*i)),r=o*n.mass*e.mass/(l*l*l),p+=r*a,f+=r*i):u&&(a=t.massX/t.mass-e.pos.x,i=t.massY/t.mass-e.pos.y,l=Math.sqrt(a*a+i*i),0===l&&(a=(Math.random()-.5)/50,i=(Math.random()-.5)/50,l=Math.sqrt(a*a+i*i)),(t.right-t.left)/l<s?(r=o*t.mass*e.mass/(l*l*l),p+=r*a,f+=r*i):(t.quad0&&(c[y]=t.quad0,d+=1,y+=1),t.quad1&&(c[y]=t.quad1,d+=1,y+=1),t.quad2&&(c[y]=t.quad2,d+=1,y+=1),t.quad3&&(c[y]=t.quad3,d+=1,y+=1)))}e.force.x+=p,e.force.y+=f}}}}},460:(t,e,o)=>{const s=o(999);t.exports={setInitialPositionState:function(t,e){let o=t.position(),n=e.currentBoundingBox,r=t.scratch(e.name);null==r&&(r={},t.scratch(e.name,r)),s(r,e.randomize?{x:n.x1+Math.random()*n.w,y:n.y1+Math.random()*n.h}:{x:o.x,y:o.y}),r.locked=t.locked()},getNodePositionData:function(t,e){return t.scratch(e.name)},refreshPositions:function(t,e){t.positions(function(t){let o=t.scratch(e.name);return{x:o.x,y:o.y}})}}},480:t=>{const e=Object.freeze({pos:{x:0,y:0},prevPos:{x:0,y:0},force:{x:0,y:0},velocity:{x:0,y:0},mass:1}),o=(t,e)=>{return o=((t,e)=>null!=t?t:e)(t,e),{x:o.x,y:o.y};var o};t.exports={makeBody:function(t){let s={};return s.pos=o(t.pos,e.pos),s.prevPos=o(t.prevPos,s.pos),s.force=o(t.force,e.force),s.velocity=o(t.velocity,e.velocity),s.mass=null!=t.mass?t.mass:e.mass,s.locked=t.locked,s}}},493:(t,e,o)=>{const{integrate:s}=o(361),{applyDrag:n}=o(106),{applySpring:r}=o(629);t.exports={tick:function({bodies:t,springs:e,quadtree:o,timeStep:a,gravity:i,theta:l,dragCoeff:u,pull:c}){t.forEach(t=>{let e=t._scratch;e&&(t.locked=e.locked,t.grabbed=e.grabbed,t.pos.x=e.x,t.pos.y=e.y)}),o.insertBodies(t);for(let e=0;e<t.length;e++){let s=t[e];o.updateBodyForce(s,i,l,c),n(s,u)}for(let t=0;t<e.length;t++){let o=e[t];r(o)}let p=s(t,a);return t.forEach(t=>{let e=t._scratch;e&&(e.x=t.pos.x,e.y=t.pos.y)}),p}}},570:t=>{const e=function(){};let o=function(t){let e=t,o=t.layout.tick(e);e.firstUpdate&&(e.animateContinuously&&e.layout.emit("layoutready"),e.firstUpdate=!1),e.tickIndex++;let s=Date.now()-e.startTime;return!e.infinite&&(o||e.tickIndex>=e.maxIterations||s>=e.maxSimulationTime)};t.exports={tick:o,multitick:function(t,s=e,n=e){let r=!1,a=t;for(let t=0;t<a.refresh&&(r=!a.running||o(a),!r);t++);r?n():s()}}},606:t=>{const e=Object.freeze({springLength:t=>80,springCoeff:t=>8e-4,mass:t=>4,gravity:-1.2,pull:.001,theta:.666,dragCoeff:.02,movementThreshold:1,timeStep:20});t.exports=e},629:(t,e,o)=>{const s=o(999),n=Object.freeze({source:null,target:null,length:80,coeff:2e-4,weight:1});t.exports={makeSpring:function(t){return s({},n,t)},applySpring:function(t){let e=t.source,o=t.target,s=t.length<0?n.length:t.length,r=o.pos.x-e.pos.x,a=o.pos.y-e.pos.y,i=Math.sqrt(r*r+a*a);0===i&&(r=(Math.random()-.5)/50,a=(Math.random()-.5)/50,i=Math.sqrt(r*r+a*a));let l=i-s,u=(!t.coeff||t.coeff<0?n.springCoeff:t.coeff)*l/i*t.weight;e.force.x+=u*r,e.force.y+=u*a,o.force.x-=u*r,o.force.y-=u*a}}},666:t=>{t.exports=function(t,e){return null==(t=null==t?{x1:0,y1:0,w:e.width(),h:e.height()}:{x1:t.x1,x2:t.x2,y1:t.y1,y2:t.y2,w:t.w,h:t.h}).x2&&(t.x2=t.x1+t.w),null==t.w&&(t.w=t.x2-t.x1),null==t.y2&&(t.y2=t.y1+t.h),null==t.h&&(t.h=t.y2-t.y1),t}},999:t=>{t.exports=null!=Object.assign?Object.assign.bind(Object):function(t,...e){return e.forEach(e=>{Object.keys(e).forEach(o=>t[o]=e[o])}),t}}},e={},o=function o(s){var n=e[s];if(void 0!==n)return n.exports;var r=e[s]={exports:{}};return t[s](r,r.exports,o),r.exports}(44);export{o as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3l0b3NjYXBlLWV1bGVyLmpzIiwibWFwcGluZ3MiOiJjQUVBQSxFQUFPQyxRQUFVQyxPQUFPQyxPQUFPLENBQzdCQyxTQUFTLEVBQ1RDLFFBQVMsR0FDVEMsY0FBZSxJQUNmQyxrQkFBbUIsSUFDbkJDLDBCQUEwQixFQUMxQkMsS0FBSyxFQUNMQyxRQUFTLEdBQ1RDLGlCQUFhQyxFQUdiQyxNQUFPLFdBQVcsRUFDbEJDLEtBQU0sV0FBVyxFQUdqQkMsV0FBVyxFQUdYQyxVQUFVLEcsZUNwQlosTUFBTUMsRUFBUSxFQUFRLEtBR3RCLElBQUlDLEVBQVcsU0FBVUMsR0FDbEJBLEdBRUxBLEVBQVcsU0FBVSxRQUFTRixFQUNoQyxFQUV5QixvQkFBZEUsV0FDVEQsRUFBVUMsV0FHWm5CLEVBQU9DLFFBQVVpQixDLFNDVmpCbEIsRUFBT0MsUUFBVSxXQUdmbUIsS0FBS0MsS0FBTyxLQU1aRCxLQUFLRSxNQUFRLEtBQ2JGLEtBQUtHLE1BQVEsS0FDYkgsS0FBS0ksTUFBUSxLQUNiSixLQUFLSyxNQUFRLEtBR2JMLEtBQUtNLEtBQU8sRUFHWk4sS0FBS08sTUFBUSxFQUNiUCxLQUFLUSxNQUFRLEVBR2JSLEtBQUtTLEtBQU8sRUFDWlQsS0FBS1UsSUFBTSxFQUNYVixLQUFLVyxPQUFTLEVBQ2RYLEtBQUtZLE1BQVEsQ0FDZixDLFVDWkFoQyxFQUFPQyxRQUFVLENBQUVnQyxVQWZuQixTQUFvQlosRUFBTWEsR0FDeEIsSUFBSUMsRUFHRkEsRUFEcUIsTUFBbkJELEVBQ1VBLEVBQ2UsTUFBbEJiLEVBQUtjLFVBQ0ZkLEVBQUtjLFVBUkEsSUFhbkJkLEVBQUtlLE1BQU1DLEdBQUtGLEVBQVlkLEVBQUtpQixTQUFTRCxFQUMxQ2hCLEVBQUtlLE1BQU1HLEdBQUtKLEVBQVlkLEVBQUtpQixTQUFTQyxDQUM1QyxFLGdCQ1hBLE1BQU1DLEVBQVMsRUFBUSxLQUNqQkMsRUFBVyxFQUFRLElBQ25CQyxFQUFrQixFQUFRLE1BQzFCLHdCQUFFQyxFQUF1QixpQkFBRUMsRUFBZ0Isb0JBQUVDLEdBQXdCLEVBQVEsTUFDN0UsVUFBRUMsR0FBYyxFQUFRLEtBa0w5QjlDLEVBQU9DLFFBaExQLE1BQ0UsV0FBQThDLENBQWFDLEdBQ1gsSUFBSUMsRUFBSTdCLEtBQUs0QixRQUFVUixFQUFRLENBQUMsRUFBR0MsRUFBVU8sR0FFM0NFLEVBQVFELEVBQUVFLEtBQUtELFFBRW5CLElBQUlELEVBQUVsQyxVQUNOLENBQ0NtQyxFQUFRQSxFQUFNRSxLQUFLLENBQUNDLEVBQUVDLElBQUlELEVBQUVFLFdBQVdsQixFQUFFaUIsRUFBRUMsV0FBV2xCLEdBQ3RELE1BQU1tQixFQUFPLENBQUNuQixFQUFHLEVBQUdFLEVBQUcsR0FDakJrQixFQUFNLENBQUMsRUFDYlAsRUFBTVEsUUFBUUMsSUFFYnpELE9BQU9zQyxPQUFPaUIsRUFBSUUsRUFBRUosWUFDakJLLEtBQUtDLElBQUlMLEVBQUtuQixFQUFJb0IsRUFBSXBCLEdBQUtZLEVBQUVhLE9BQVNGLEtBQUtDLElBQUlMLEVBQUtqQixFQUFJa0IsRUFBSWxCLEdBQUtVLEVBQUVhLE9BRXJFSCxFQUFFSixTQUFTLENBQUNsQixFQUFpQixJQUFkdUIsS0FBS0csU0FBY3hCLEVBQWlCLElBQWRxQixLQUFLRyxXQUUzQzdELE9BQU9zQyxPQUFPZ0IsRUFBS0MsSUFFckIsQ0FFRSxJQUFJTyxFQUFJNUMsS0FBSzZDLE1BQVF6QixFQUFRLENBQUMsRUFBR1MsRUFBRyxDQUNsQ2lCLE9BQVE5QyxLQUNSOEIsUUFDQWlCLE1BQU9sQixFQUFFRSxLQUFLZ0IsUUFDZEMsVUFBVyxFQUNYQyxhQUFhLElBR2ZMLEVBQUVNLFdBQWFyQixFQUFFN0MsU0FBeUIsUUFBZDZDLEVBQUU3QyxRQUM5QjRELEVBQUVPLG9CQUFzQnRCLEVBQUU3QyxVQUFZNEQsRUFBRU0sVUFDMUMsQ0FFQSxHQUFBRSxHQUNFLElBQUlDLEVBQUlyRCxLQUNKNEMsRUFBSTVDLEtBQUs2QyxNQWdCYixHQWRBRCxFQUFFSSxVQUFZLEVBQ2RKLEVBQUVLLGFBQWMsRUFDaEJMLEVBQUVVLFVBQVlDLEtBQUtDLE1BQ25CWixFQUFFYSxTQUFVLEVBRVpiLEVBQUVjLG1CQUFxQnBDLEVBQWlCc0IsRUFBRXJELFlBQWFxRCxFQUFFZSxJQUVyRGYsRUFBRW5ELE9BQVM0RCxFQUFFTyxJQUFLLFFBQVNoQixFQUFFbkQsT0FDN0JtRCxFQUFFbEQsTUFBUTJELEVBQUVPLElBQUssT0FBUWhCLEVBQUVsRCxNQUUvQmtELEVBQUVkLE1BQU1RLFFBQVNDLEdBQUtoQixFQUF5QmdCLEVBQUdLLElBRWxEUyxFQUFFUSxPQUFRakIsR0FFTkEsRUFBRU8sb0JBQXFCLENBQ3pCLElBQUlXLEVBQVlDLElBQ1RuQixFQUFFeEQsMkJBRVNxQyxFQUFxQnNDLEVBQU1uQixHQUFJb0IsVUFBWUQsRUFBS0MsY0FHOURELEVBQUtELGFBSUxHLEVBQVlGLElBQ1RuQixFQUFFeEQsMEJBRVNxQyxFQUFxQnNDLEVBQU1uQixHQUFJb0IsV0FHN0NELEVBQUtHLFdBSUxDLEVBQWtCSixHQUFRdEMsRUFBcUJzQyxFQUFNbkIsR0FBSXdCLFFBQVVMLEVBQUtLLFVBRXhFQyxFQUFTLFVBQVMsT0FBRUMsSUFDdEJILEVBQWlCRyxFQUNuQixFQUVJQyxFQUFTRixFQUVURyxFQUFTLFVBQVMsT0FBRUYsSUFDdEIsSUFBSUcsRUFBSWhELEVBQXFCNkMsRUFBUTFCLEdBQ2pDOEIsRUFBS0osRUFBT25DLFdBRWhCc0MsRUFBRXhELEVBQUl5RCxFQUFHekQsRUFDVHdELEVBQUV0RCxFQUFJdUQsRUFBR3ZELENBQ1gsRUFFSXdELEVBQWVaLElBQ2pCQSxFQUFLYSxHQUFHLE9BQVFQLEdBQ2hCTixFQUFLYSxHQUFHLE9BQVFMLEdBQ2hCUixFQUFLYSxHQUFHLE9BQVFKLElBR2RLLEVBQWlCZCxJQUNuQkEsRUFBS2UsZUFBZSxPQUFRVCxHQUM1Qk4sRUFBS2UsZUFBZSxPQUFRUCxHQUM1QlIsRUFBS2UsZUFBZSxPQUFRTixJQUcxQm5GLEVBQU0sS0FDSnVELEVBQUV2RCxLQUFPdUQsRUFBRU8scUJBQ2JQLEVBQUVlLEdBQUd0RSxJQUFLdUQsRUFBRXRELFVBSVp5RixFQUFZLEtBQ2R2RCxFQUFrQm9CLEVBQUVkLE1BQU9jLEdBQzNCdkQsSUFFQTJGLHNCQUF1QkMsSUFHckJBLEVBQVEsV0FDVnZELEVBQVdrQixFQUFHbUMsRUFBV0csRUFDM0IsRUFFSUEsRUFBUyxLQUNYMUQsRUFBa0JvQixFQUFFZCxNQUFPYyxHQUMzQnZELElBRUF1RCxFQUFFZCxNQUFNUSxRQUFTQyxJQUNmMEIsRUFBVzFCLEdBQ1hzQyxFQUFnQnRDLEtBR2xCSyxFQUFFYSxTQUFVLEVBRVpKLEVBQUU4QixLQUFLLGVBR1Q5QixFQUFFOEIsS0FBSyxlQUVQdkMsRUFBRWQsTUFBTVEsUUFBU0MsSUFDZnVCLEVBQVd2QixHQUNYb0MsRUFBY3BDLEtBR2hCMEMsR0FDRixLQUFPLENBQ0wsSUFBSUcsR0FBTyxFQUNQTCxFQUFZLE9BQ1pHLEVBQVMsSUFBTUUsR0FBTyxFQUUxQixNQUFRQSxHQUNOMUQsRUFBV2tCLEVBQUdtQyxFQUFXRyxHQUczQnRDLEVBQUViLEtBQUtzRCxnQkFBaUJyRixLQUFNNEMsRUFBR21CLElBQy9CLElBQUl1QixFQUFLN0QsRUFBcUJzQyxFQUFNbkIsR0FFcEMsTUFBTyxDQUFFM0IsRUFBR3FFLEVBQUdyRSxFQUFHRSxFQUFHbUUsRUFBR25FLElBRTVCLENBSUEsT0FGQWtDLEVBQUVrQyxRQUFTM0MsR0FFSjVDLElBQ1QsQ0FFQSxNQUFBNkQsR0FBUyxDQUNULE9BQUEwQixHQUFVLENBQ1YsSUFBQUMsR0FBTyxDQUVQLElBQUE5RixHQUdFLE9BRkFNLEtBQUs2QyxNQUFNWSxTQUFVLEVBRWR6RCxJQUNULENBRUEsT0FBQXlGLEdBQ0UsT0FBT3pGLElBQ1QsRSxnQkNuTEYsTUFBTTBGLEVBQVMsRUFBUSxLQUNqQnRFLEVBQVMsRUFBUSxLQUNqQkMsRUFBVyxFQUFRLE1BQ25CLEtBQUVtRSxHQUFTLEVBQVEsTUFDbkIsYUFBRUcsR0FBaUIsRUFBUSxNQUMzQixTQUFFQyxHQUFhLEVBQVEsTUFDdkIsV0FBRUMsR0FBZSxFQUFRLEtBRXpCQyxFQUFXdkQsR0FBS0EsRUFBRXVELFdBQ2xCQyxFQUFjeEQsSUFBTXVELEVBQVN2RCxHQUc3QnlELEVBQWVDLEdBQUtILEVBQVVHLEVBQUVDLFdBQWNKLEVBQVVHLEVBQUUzQixVQUMxRDZCLEVBQWtCRixJQUFNRCxFQUFhQyxHQUNyQ0csRUFBVTdELEdBQUtBLEVBQUU4RCxRQUFRLFNBQVNwRyxLQUNsQ3FHLEVBQTBCL0QsR0FBS3VELEVBQVN2RCxHQUFLQSxFQUFFZ0UsY0FBY0MsT0FBUVQsR0FBZ0J4RCxFQUVyRmtFLEVBQWFDLElBQ2pCLElBQUlMLEVBQVVLLEVBQUdMLFFBQVEsU0FRekIsT0FOS0EsSUFDSEEsRUFBVSxDQUFDLEVBRVhLLEVBQUdMLFFBQVEsUUFBU0EsSUFHZkEsR0FHSE0sRUFBUSxDQUFFQyxFQUFLQyxJQXRCWSxtQkF1QnJCRCxFQUNEQSxFQUFLQyxHQUVMRCxFQXdGWGhJLEVBQU9DLFFBcEZQLGNBQW9CNkcsRUFDbEIsV0FBQS9ELENBQWFDLEdBQ1hrRixNQUFPMUYsRUFBUSxDQUFDLEVBQUdDLEVBQVVPLEdBQy9CLENBRUEsTUFBQWlDLENBQVFoQixHQUNOLElBQUlELEVBQUlDLEVBRVJELEVBQUVtRSxTQUFXcEIsSUFFYixJQUFJcUIsRUFBU3BFLEVBQUVvRSxPQUFTLEdBR3hCcEUsRUFBRWQsTUFBTTBFLE9BQVFqRSxHQUFLd0QsRUFBWXhELElBQUtELFFBQVNDLElBQzdDLElBQUk4RCxFQUFVSSxFQUFZbEUsR0FFdEJ0QyxFQUFPMkYsRUFBUyxDQUNsQnZELElBQUssQ0FBRXBCLEVBQUdvRixFQUFRcEYsRUFBR0UsRUFBR2tGLEVBQVFsRixHQUNoQ2IsS0FBTXFHLEVBQU8vRCxFQUFFdEMsS0FBTWlDLEdBQ3JCMEUsT0FBUVosRUFBUVksU0FHbEJoSCxFQUFLaUgsUUFBVTNFLEVBRWY4RCxFQUFRcEcsS0FBT0EsRUFFZkEsRUFBS2tILFNBQVdkLEVBRWhCVyxFQUFPSSxLQUFNbkgsS0FHZixJQUFJb0gsRUFBVXpFLEVBQUV5RSxRQUFVLEdBRzFCekUsRUFBRUcsTUFBTXlELE9BQVFMLEdBQWtCN0QsUUFBUzJELElBQ3pDLElBQUlxQixFQUFTekIsRUFBVyxDQUN0QkssT0FBUUUsRUFBU0gsRUFBRUMsVUFDbkI1QixPQUFROEIsRUFBU0gsRUFBRTNCLFVBQ25CaUQsT0FBUVosRUFBTy9ELEVBQUU0RSxhQUFjdkIsR0FDL0J3QixNQUFPZCxFQUFPL0QsRUFBRThFLFlBQWF6QixLQUcvQnFCLEVBQU9LLFFBQVUxQixFQUVqQixJQUFJSSxFQUFVSSxFQUFZUixHQUUxQnFCLEVBQU9ILFNBQVdkLEVBRWxCQSxFQUFRaUIsT0FBU0EsRUFFakJELEVBQVFELEtBQU1FLEtBSWhCMUUsRUFBRUcsTUFBTXlELE9BQVFSLEdBQWUxRCxRQUFTMkQsSUFDdEMsSUFBSTJCLEVBQVV0QixFQUF5QkwsRUFBRUMsVUFDckMyQixFQUFVdkIsRUFBeUJMLEVBQUUzQixVQUd6Q3NELEVBQVUsQ0FBRUEsRUFBUSxJQUNwQkMsRUFBVSxDQUFFQSxFQUFRLElBRXBCRCxFQUFRdEYsUUFBU3dGLElBQ2ZELEVBQVF2RixRQUFTeUYsSUFDZlYsRUFBUUQsS0FBTXZCLEVBQVcsQ0FDdkJLLE9BQVFFLEVBQVMwQixHQUNqQnhELE9BQVE4QixFQUFTMkIsR0FDakJSLE9BQVFaLEVBQU8vRCxFQUFFNEUsYUFBY3ZCLEdBQy9Cd0IsTUFBT2QsRUFBTy9ELEVBQUU4RSxZQUFhekIsV0FLdkMsQ0FFQSxJQUFBVCxDQUFNM0MsR0FLSixPQUplMkMsRUFBTTNDLElBRUlBLEVBQU1tRixpQkFHakMsRSxVQ25IRixTQUFTQyxJQUNMakksS0FBS2tJLE1BQVEsR0FDYmxJLEtBQUttSSxPQUFTLENBQ2xCLENBNEJBLFNBQVNDLEVBQW1CckUsRUFBTTlELEdBQzlCRCxLQUFLK0QsS0FBT0EsRUFDWi9ELEtBQUtDLEtBQU9BLENBQ2hCLENBekNBckIsRUFBT0MsUUFBVW9KLEVBWWpCQSxFQUFZSSxVQUFZLENBQ3BCQyxRQUFTLFdBQ0wsT0FBdUIsSUFBaEJ0SSxLQUFLbUksTUFDaEIsRUFDQWYsS0FBTSxTQUFVckQsRUFBTTlELEdBQ2xCLElBQUlzSSxFQUFPdkksS0FBS2tJLE1BQU1sSSxLQUFLbUksUUFDdEJJLEdBS0RBLEVBQUt4RSxLQUFPQSxFQUNad0UsRUFBS3RJLEtBQU9BLEdBSFpELEtBQUtrSSxNQUFNbEksS0FBS21JLFFBQVUsSUFBSUMsRUFBbUJyRSxFQUFNOUQsS0FLekRELEtBQUttSSxNQUNYLEVBQ0FLLElBQUssV0FDRCxHQUFJeEksS0FBS21JLE9BQVMsRUFDZCxPQUFPbkksS0FBS2tJLFFBQVFsSSxLQUFLbUksT0FFakMsRUFDQU0sTUFBTyxXQUNIekksS0FBS21JLE9BQVMsQ0FDbEIsRSxVQ1lKdkosRUFBT0MsUUFBVSxDQUFFNkosVUE3Q25CLFNBQW9CMUIsRUFBUTJCLEdBQzFCLElBRUlDLEVBRkFDLEVBQUssRUFBR0MsRUFBSyxFQUNiQyxFQUFLLEVBQUdDLEVBQUssRUFFYkMsRUFBTWpDLEVBQU9PLE9BRWpCLEdBQVksSUFBUjBCLEVBQ0YsT0FBTyxFQUdULElBQUtMLEVBQUksRUFBR0EsRUFBSUssSUFBT0wsRUFBRyxDQUN4QixJQUFJM0ksRUFBTytHLEVBQU80QixHQUNkbkIsRUFBUWtCLEVBQVcxSSxFQUFLSyxLQUU1QixJQUFJTCxFQUFLbUUsUUFBVCxDQUVJbkUsRUFBS2dILFFBQ1BoSCxFQUFLaUIsU0FBU0QsRUFBSSxFQUNsQmhCLEVBQUtpQixTQUFTQyxFQUFJLElBRWxCbEIsRUFBS2lCLFNBQVNELEdBQUt3RyxFQUFReEgsRUFBS2UsTUFBTUMsRUFDdENoQixFQUFLaUIsU0FBU0MsR0FBS3NHLEVBQVF4SCxFQUFLZSxNQUFNRyxHQUd4QyxJQUFJK0gsRUFBS2pKLEVBQUtpQixTQUFTRCxFQUNuQmtJLEVBQUtsSixFQUFLaUIsU0FBU0MsRUFDbkJpSSxFQUFJNUcsS0FBSzZHLEtBQUtILEVBQUtBLEVBQUtDLEVBQUtBLEdBRTdCQyxFQUFJLElBQ05uSixFQUFLaUIsU0FBU0QsRUFBSWlJLEVBQUtFLEVBQ3ZCbkosRUFBS2lCLFNBQVNDLEVBQUlnSSxFQUFLQyxHQUd6QlAsRUFBS0YsRUFBVzFJLEVBQUtpQixTQUFTRCxFQUM5QjhILEVBQUtKLEVBQVcxSSxFQUFLaUIsU0FBU0MsRUFFOUJsQixFQUFLb0MsSUFBSXBCLEdBQUs0SCxFQUNkNUksRUFBS29DLElBQUlsQixHQUFLNEgsRUFFZEQsR0FBTXRHLEtBQUtDLElBQUlvRyxHQUFLRyxHQUFNeEcsS0FBS0MsSUFBSXNHLEVBekJMLENBMEJoQyxDQUVBLE9BQVFELEVBQUtBLEVBQUtFLEVBQUtBLEdBQUlDLENBQzdCLEUsZ0JDekNBLE1BQU1LLEVBQU8sRUFBUSxJQUNmckIsRUFBYyxFQUFRLEtBSXRCc0IsRUFBaUIsQ0FBQ0MsRUFBSUMsS0FDMUIsSUFDSVosRUFBS3JHLEtBQUtDLElBQUkrRyxFQUFHdkksRUFBSXdJLEVBQUd4SSxHQUN4QjhILEVBQUt2RyxLQUFLQyxJQUFJK0csRUFBR3JJLEVBQUlzSSxFQUFHdEksR0FFNUIsT0FBTzBILEVBSlMsTUFJU0UsRUFKVCxNQWlTbEIsU0FBU1csRUFBUzNGLEVBQU00RixHQUN0QixPQUFZLElBQVJBLEVBQWtCNUYsRUFBSzdELE1BQ2YsSUFBUnlKLEVBQWtCNUYsRUFBSzVELE1BQ2YsSUFBUndKLEVBQWtCNUYsRUFBSzNELE1BQ2YsSUFBUnVKLEVBQWtCNUYsRUFBSzFELE1BQ3BCLElBQ1QsQ0FFQSxTQUFTdUosRUFBUzdGLEVBQU00RixFQUFLRSxHQUNmLElBQVJGLEVBQVc1RixFQUFLN0QsTUFBUTJKLEVBQ1gsSUFBUkYsRUFBVzVGLEVBQUs1RCxNQUFRMEosRUFDaEIsSUFBUkYsRUFBVzVGLEVBQUszRCxNQUFReUosRUFDaEIsSUFBUkYsSUFBVzVGLEVBQUsxRCxNQUFRd0osRUFDbkMsQ0FFQWpMLEVBQU9DLFFBQVUsQ0FBRThHLGFBelNuQixXQUNFLElBQUltRSxFQUFjLEdBQ2hCQyxFQUFjLElBQUk5QixFQUNsQitCLEVBQWEsR0FDYkMsRUFBaUIsRUFDakJDLEVBQU9DLElBRVQsU0FBU0EsSUFFUCxJQUFJcEcsRUFBT2lHLEVBQVdDLEdBZXRCLE9BZElsRyxHQUNGQSxFQUFLN0QsTUFBUSxLQUNiNkQsRUFBSzVELE1BQVEsS0FDYjRELEVBQUszRCxNQUFRLEtBQ2IyRCxFQUFLMUQsTUFBUSxLQUNiMEQsRUFBSzlELEtBQU8sS0FDWjhELEVBQUt6RCxLQUFPeUQsRUFBS3hELE1BQVF3RCxFQUFLdkQsTUFBUSxFQUN0Q3VELEVBQUt0RCxLQUFPc0QsRUFBS25ELE1BQVFtRCxFQUFLckQsSUFBTXFELEVBQUtwRCxPQUFTLElBRWxEb0QsRUFBTyxJQUFJdUYsRUFDWFUsRUFBV0MsR0FBa0JsRyxLQUc3QmtHLEVBQ0tsRyxDQUNULENBa0tBLFNBQVNxRyxFQUFPQyxHQUlkLElBSEFOLEVBQVl0QixRQUNac0IsRUFBWTNDLEtBQUs4QyxFQUFNRyxJQUVmTixFQUFZekIsV0FBVyxDQUM3QixJQUFJZ0MsRUFBWVAsRUFBWXZCLE1BQzFCekUsRUFBT3VHLEVBQVV2RyxLQUNqQjlELEVBQU9xSyxFQUFVckssS0FFbkIsR0FBSzhELEVBQUs5RCxLQTJDSCxDQUlMLElBQUlzSyxFQUFVeEcsRUFBSzlELEtBR25CLEdBRkE4RCxFQUFLOUQsS0FBTyxLQUVSc0osRUFBZWdCLEVBQVFsSSxJQUFLcEMsRUFBS29DLEtBQU0sQ0FHekMsSUFBSW1JLEVBQWUsRUFDbkIsRUFBRyxDQUNELElBQUlDLEVBQVNqSSxLQUFLRyxTQUNka0csR0FBTTlFLEVBQUtuRCxNQUFRbUQsRUFBS3RELE1BQVFnSyxFQUNoQzFCLEdBQU1oRixFQUFLcEQsT0FBU29ELEVBQUtyRCxLQUFPK0osRUFFcENGLEVBQVFsSSxJQUFJcEIsRUFBSThDLEVBQUt0RCxLQUFPb0ksRUFDNUIwQixFQUFRbEksSUFBSWxCLEVBQUk0QyxFQUFLckQsSUFBTXFJLEVBQzNCeUIsR0FBZ0IsQ0FFbEIsT0FBU0EsRUFBZSxHQUFLakIsRUFBZWdCLEVBQVFsSSxJQUFLcEMsRUFBS29DLE1BRTlELEdBQXFCLElBQWpCbUksR0FBc0JqQixFQUFlZ0IsRUFBUWxJLElBQUtwQyxFQUFLb0MsS0FLekQsTUFFSixDQUVBMEgsRUFBWTNDLEtBQUtyRCxFQUFNd0csR0FDdkJSLEVBQVkzQyxLQUFLckQsRUFBTTlELEVBQ3pCLEtBNUVnQixDQUVkLElBQUlnQixFQUFJaEIsRUFBS29DLElBQUlwQixFQUNiRSxFQUFJbEIsRUFBS29DLElBQUlsQixFQUNqQjRDLEVBQUt6RCxLQUFPeUQsRUFBS3pELEtBQU9MLEVBQUtLLEtBQzdCeUQsRUFBS3hELE1BQVF3RCxFQUFLeEQsTUFBUU4sRUFBS0ssS0FBT1csRUFDdEM4QyxFQUFLdkQsTUFBUXVELEVBQUt2RCxNQUFRUCxFQUFLSyxLQUFPYSxFQUl0QyxJQUFJdUosRUFBVSxFQUNaakssRUFBT3NELEVBQUt0RCxLQUNaRyxHQUFTbUQsRUFBS25ELE1BQVFILEdBQVEsRUFDOUJDLEVBQU1xRCxFQUFLckQsSUFDWEMsR0FBVW9ELEVBQUtwRCxPQUFTRCxHQUFPLEVBRTdCTyxFQUFJTCxJQUNOOEosR0FBb0IsRUFDcEJqSyxFQUFPRyxFQUNQQSxFQUFRbUQsRUFBS25ELE9BRVhPLEVBQUlSLElBQ04rSixHQUFvQixFQUNwQmhLLEVBQU1DLEVBQ05BLEVBQVNvRCxFQUFLcEQsUUFHaEIsSUFBSWtKLEVBQVFILEVBQVMzRixFQUFNMkcsR0FDdEJiLEVBYUhFLEVBQVkzQyxLQUFLeUMsRUFBTzVKLElBVnhCNEosRUFBUU0sSUFDUk4sRUFBTXBKLEtBQU9BLEVBQ2JvSixFQUFNbkosSUFBTUEsRUFDWm1KLEVBQU1qSixNQUFRQSxFQUNkaUosRUFBTWxKLE9BQVNBLEVBQ2ZrSixFQUFNNUosS0FBT0EsRUFFYjJKLEVBQVM3RixFQUFNMkcsRUFBU2IsR0FLNUIsQ0FrQ0YsQ0FDRixDQUVBLE1BQU8sQ0FDTGMsYUFoSkYsU0FBc0IzRCxHQUNwQixHQUFzQixJQUFsQkEsRUFBT08sT0FBZ0IsT0FFM0IsSUFJRXFCLEVBSkVnQyxFQUFLQyxPQUFPQyxVQUNkQyxFQUFLRixPQUFPQyxVQUNaRSxFQUFLSCxPQUFPSSxVQUNaQyxFQUFLTCxPQUFPSSxVQUVaaEMsRUFBTWpDLEVBQU9PLE9BSWYsSUFEQXFCLEVBQUlLLEVBQ0dMLEtBQUssQ0FDVixJQUFJM0gsRUFBSStGLEVBQU80QixHQUFHdkcsSUFBSXBCLEVBQ2xCRSxFQUFJNkYsRUFBTzRCLEdBQUd2RyxJQUFJbEIsRUFDbEJGLEVBQUkySixJQUNOQSxFQUFLM0osR0FFSEEsRUFBSStKLElBQ05BLEVBQUsvSixHQUVIRSxFQUFJNEosSUFDTkEsRUFBSzVKLEdBRUhBLEVBQUkrSixJQUNOQSxFQUFLL0osRUFFVCxDQUdBLElBQUkwSCxFQUFLbUMsRUFBS0osRUFDWjdCLEVBQUttQyxFQUFLSCxFQWtCWixJQWpCSWxDLEVBQUtFLEVBQ1BtQyxFQUFLSCxFQUFLbEMsRUFFVm1DLEVBQUtKLEVBQUs3QixFQUdaa0IsRUFBaUIsRUFDakJDLEVBQU9DLElBQ1BELEVBQUt6SixLQUFPbUssRUFDWlYsRUFBS3RKLE1BQVFvSyxFQUNiZCxFQUFLeEosSUFBTXFLLEVBQ1hiLEVBQUt2SixPQUFTdUssRUFFZHRDLEVBQUlLLEVBQU0sRUFDTkwsR0FBSyxJQUNQc0IsRUFBS2pLLEtBQU8rRyxFQUFPNEIsSUFFZEEsS0FDTHdCLEVBQU9wRCxFQUFPNEIsR0FFbEIsRUE2RkV1QyxnQkEzUEYsU0FBaUJDLEVBQVlDLEVBQVMzSSxFQUFPNEksR0FDM0MsSUFDRWxDLEVBQ0FQLEVBQ0FFLEVBQ0F3QyxFQUpFQyxFQUFRMUIsRUFJUDJCLEVBQUssRUFDUkMsRUFBSyxFQUNMQyxFQUFjLEVBQ2RDLEVBQVcsRUFDWEMsRUFBVSxFQUVaTCxFQUFNLEdBQUt0QixFQWhERWQsS0FBT0EsRUFBRW5JLEVBQUksRUFBR21JLEVBQUVqSSxFQUFJLEdBa0RuQzJLLENBQVVWLEVBQVdwSyxPQUVyQixJQUFJK0ssR0FBTVgsRUFBVy9JLElBQUlwQixFQUNyQitLLEdBQU1aLEVBQVcvSSxJQUFJbEIsRUFDckI4SyxFQUFLekosS0FBSzZHLEtBQUswQyxFQUFLQSxFQUFLQyxFQUFLQSxHQUM5QkUsRUFBS2QsRUFBVzlLLEtBQU9nTCxFQUFPVyxFQUtsQyxJQUhBUixHQUFNUyxFQUFLSCxFQUNYTCxHQUFNUSxFQUFLRixFQUVKTCxHQUFhLENBQ2xCLElBQUk1SCxFQUFPeUgsRUFBTUksR0FDZjNMLEVBQU84RCxFQUFLOUQsS0FFZDBMLEdBQWUsRUFDZkMsR0FBWSxFQUNaLElBQUlPLEVBQWlCbE0sSUFBU21MLEVBQzFCbkwsR0FBUWtNLEdBSVZ0RCxFQUFLNUksRUFBS29DLElBQUlwQixFQUFJbUssRUFBVy9JLElBQUlwQixFQUNqQzhILEVBQUs5SSxFQUFLb0MsSUFBSWxCLEVBQUlpSyxFQUFXL0ksSUFBSWxCLEVBQ2pDb0ssRUFBSS9JLEtBQUs2RyxLQUFLUixFQUFLQSxFQUFLRSxFQUFLQSxHQUVuQixJQUFOd0MsSUFFRjFDLEdBQU1yRyxLQUFLRyxTQUFXLElBQU8sR0FDN0JvRyxHQUFNdkcsS0FBS0csU0FBVyxJQUFPLEdBQzdCNEksRUFBSS9JLEtBQUs2RyxLQUFLUixFQUFLQSxFQUFLRSxFQUFLQSxJQUsvQkssRUFBSWlDLEVBQVVwTCxFQUFLSyxLQUFPOEssRUFBVzlLLE1BQVFpTCxFQUFJQSxFQUFJQSxHQUNyREUsR0FBTXJDLEVBQUlQLEVBQ1Y2QyxHQUFNdEMsRUFBSUwsR0FDRG9ELElBSVR0RCxFQUFLOUUsRUFBS3hELE1BQVF3RCxFQUFLekQsS0FBTzhLLEVBQVcvSSxJQUFJcEIsRUFDN0M4SCxFQUFLaEYsRUFBS3ZELE1BQVF1RCxFQUFLekQsS0FBTzhLLEVBQVcvSSxJQUFJbEIsRUFDN0NvSyxFQUFJL0ksS0FBSzZHLEtBQUtSLEVBQUtBLEVBQUtFLEVBQUtBLEdBRW5CLElBQU53QyxJQUdGMUMsR0FBTXJHLEtBQUtHLFNBQVcsSUFBTyxHQUM3Qm9HLEdBQU12RyxLQUFLRyxTQUFXLElBQU8sR0FDN0I0SSxFQUFJL0ksS0FBSzZHLEtBQUtSLEVBQUtBLEVBQUtFLEVBQUtBLEtBSTFCaEYsRUFBS25ELE1BQVFtRCxFQUFLdEQsTUFBUThLLEVBQUk3SSxHQUlqQzBHLEVBQUlpQyxFQUFVdEgsRUFBS3pELEtBQU84SyxFQUFXOUssTUFBUWlMLEVBQUlBLEVBQUlBLEdBQ3JERSxHQUFNckMsRUFBSVAsRUFDVjZDLEdBQU10QyxFQUFJTCxJQUtOaEYsRUFBSzdELFFBQ1BzTCxFQUFNSyxHQUFXOUgsRUFBSzdELE1BQ3RCeUwsR0FBZSxFQUNmRSxHQUFXLEdBRVQ5SCxFQUFLNUQsUUFDUHFMLEVBQU1LLEdBQVc5SCxFQUFLNUQsTUFDdEJ3TCxHQUFlLEVBQ2ZFLEdBQVcsR0FFVDlILEVBQUszRCxRQUNQb0wsRUFBTUssR0FBVzlILEVBQUszRCxNQUN0QnVMLEdBQWUsRUFDZkUsR0FBVyxHQUVUOUgsRUFBSzFELFFBQ1BtTCxFQUFNSyxHQUFXOUgsRUFBSzFELE1BQ3RCc0wsR0FBZSxFQUNmRSxHQUFXLElBSW5CLENBRUFULEVBQVdwSyxNQUFNQyxHQUFLd0ssRUFDdEJMLEVBQVdwSyxNQUFNRyxHQUFLdUssQ0FDeEIsRUFxSkYsRSxnQkN6U0EsTUFBTXRLLEVBQVMsRUFBUSxLQXVDdkJ4QyxFQUFPQyxRQUFVLENBQUUwQyx3QkFyQ1csU0FBVXdDLEVBQU1sQixHQUM1QyxJQUFJNEIsRUFBSVYsRUFBSzVCLFdBQ1RpSyxFQUFLdkosRUFBTWEsbUJBQ1gyQyxFQUFVdEMsRUFBS3NDLFFBQVN4RCxFQUFNd0osTUFFbkIsTUFBWGhHLElBQ0ZBLEVBQVUsQ0FBQyxFQUVYdEMsRUFBS3NDLFFBQVN4RCxFQUFNd0osS0FBTWhHLElBRzVCakYsRUFBUWlGLEVBQVN4RCxFQUFNbEQsVUFBWSxDQUNqQ3NCLEVBQUdtTCxFQUFHeEIsR0FBS3BJLEtBQUtHLFNBQVd5SixFQUFHRSxFQUM5Qm5MLEVBQUdpTCxFQUFHckIsR0FBS3ZJLEtBQUtHLFNBQVd5SixFQUFHRyxHQUM1QixDQUNGdEwsRUFBR3dELEVBQUV4RCxFQUNMRSxFQUFHc0QsRUFBRXRELElBR1BrRixFQUFRWSxPQUFTbEQsRUFBS2tELFFBQ3hCLEVBaUI0Q3hGLG9CQWZsQixTQUFVc0MsRUFBTWxCLEdBQ3hDLE9BQU9rQixFQUFLc0MsUUFBU3hELEVBQU13SixLQUM3QixFQWFpRTdLLGlCQVgxQyxTQUFVTSxFQUFPZSxHQUN0Q2YsRUFBTTBLLFVBQVUsU0FBVXpJLEdBQ3hCLElBQUlzQyxFQUFVdEMsRUFBS3NDLFFBQVN4RCxFQUFNd0osTUFFbEMsTUFBTyxDQUNMcEwsRUFBR29GLEVBQVFwRixFQUNYRSxFQUFHa0YsRUFBUWxGLEVBRWYsRUFDRixFLFVDckNBLE1BQU1FLEVBQVd2QyxPQUFPQyxPQUFPLENBQzdCc0QsSUFBSyxDQUFFcEIsRUFBRyxFQUFHRSxFQUFHLEdBQ2hCc0wsUUFBUyxDQUFFeEwsRUFBRyxFQUFHRSxFQUFHLEdBQ3BCSCxNQUFPLENBQUVDLEVBQUcsRUFBR0UsRUFBRyxHQUNsQkQsU0FBVSxDQUFFRCxFQUFHLEVBQUdFLEVBQUcsR0FDckJiLEtBQU0sSUFLRm9NLEVBQVMsQ0FBRUMsRUFBS0MsS0FBU0MsT0FGZnpELEVBQ0MsRUFBRTBELEVBQUtGLElBQWdCLE1BQVBFLEVBQWNBLEVBQU1GLEVBQ2JHLENBQVVKLEVBQUtDLEdBRmxDLENBQUczTCxFQUFHbUksRUFBRW5JLEVBQUdFLEVBQUdpSSxFQUFFakksR0FBckJpSSxPQWlCaEJ4SyxFQUFPQyxRQUFVLENBQUUrRyxTQWJuQixTQUFtQm9ILEdBQ2pCLElBQUk5SyxFQUFJLENBQUMsRUFTVCxPQVBBQSxFQUFFRyxJQUFNcUssRUFBUU0sRUFBSzNLLElBQUtoQixFQUFTZ0IsS0FDbkNILEVBQUV1SyxRQUFVQyxFQUFRTSxFQUFLUCxRQUFTdkssRUFBRUcsS0FDcENILEVBQUVsQixNQUFRMEwsRUFBUU0sRUFBS2hNLE1BQU9LLEVBQVNMLE9BQ3ZDa0IsRUFBRWhCLFNBQVd3TCxFQUFRTSxFQUFLOUwsU0FBVUcsRUFBU0gsVUFDN0NnQixFQUFFNUIsS0FBb0IsTUFBYjBNLEVBQUsxTSxLQUFlME0sRUFBSzFNLEtBQU9lLEVBQVNmLEtBQ2xENEIsRUFBRStFLE9BQVMrRixFQUFLL0YsT0FFVC9FLENBQ1QsRSxnQkN2QkEsTUFBTSxVQUFFd0csR0FBYyxFQUFRLE1BQ3hCLFVBQUU3SCxHQUFjLEVBQVEsTUFDeEIsWUFBRW9NLEdBQWdCLEVBQVEsS0E2Q2hDck8sRUFBT0MsUUFBVSxDQUFFMkcsS0EzQ25CLFVBQWMsT0FBRXdCLEVBQU0sUUFBRUssRUFBTyxTQUFFTixFQUFRLFNBQUU0QixFQUFRLFFBQUUwQyxFQUFPLE1BQUUzSSxFQUFLLFVBQUUzQixFQUFTLEtBQUV1SyxJQUU5RXRFLEVBQU8xRSxRQUFTckMsSUFDZCxJQUFJd0UsRUFBSXhFLEVBQUtrSCxTQUVSMUMsSUFFTHhFLEVBQUtnSCxPQUFTeEMsRUFBRXdDLE9BQ2hCaEgsRUFBS21FLFFBQVVLLEVBQUVMLFFBQ2pCbkUsRUFBS29DLElBQUlwQixFQUFJd0QsRUFBRXhELEVBQ2ZoQixFQUFLb0MsSUFBSWxCLEVBQUlzRCxFQUFFdEQsS0FHakI0RixFQUFTNEQsYUFBYzNELEdBRXZCLElBQUssSUFBSTRCLEVBQUksRUFBR0EsRUFBSTVCLEVBQU9PLE9BQVFxQixJQUFLLENBQ3RDLElBQUkzSSxFQUFPK0csRUFBTzRCLEdBRWxCN0IsRUFBU29FLGdCQUFpQmxMLEVBQU1vTCxFQUFTM0ksRUFBTzRJLEdBQ2hEekssRUFBV1osRUFBTWMsRUFDbkIsQ0FFQSxJQUFLLElBQUk2SCxFQUFJLEVBQUdBLEVBQUl2QixFQUFRRSxPQUFRcUIsSUFBSyxDQUN2QyxJQUFJdEIsRUFBU0QsRUFBUXVCLEdBRXJCcUUsRUFBYTNGLEVBQ2YsQ0FFQSxJQUFJNEYsRUFBV3hFLEVBQVcxQixFQUFRMkIsR0FZbEMsT0FUQTNCLEVBQU8xRSxRQUFTckMsSUFDZCxJQUFJd0UsRUFBSXhFLEVBQUtrSCxTQUVSMUMsSUFFTEEsRUFBRXhELEVBQUloQixFQUFLb0MsSUFBSXBCLEVBQ2Z3RCxFQUFFdEQsRUFBSWxCLEVBQUtvQyxJQUFJbEIsS0FHVitMLENBQ1QsRSxVQzdDQSxNQUFNQyxFQUFNLFdBQVcsRUFFdkIsSUFBSTNILEVBQU8sU0FBVTNDLEdBQ25CLElBQUlELEVBQUlDLEVBR0p1SyxFQUZJdkssRUFBTUMsT0FFWTBDLEtBQU01QyxHQUU1QkEsRUFBRUssY0FDQUwsRUFBRU8scUJBQ0pQLEVBQUVFLE9BQU9xQyxLQUFLLGVBRWhCdkMsRUFBRUssYUFBYyxHQUdsQkwsRUFBRUksWUFFRixJQUFJcUssRUFBVzlKLEtBQUtDLE1BQVFaLEVBQUVVLFVBRTlCLE9BQVFWLEVBQUVoRCxXQUFjd04sR0FBcUJ4SyxFQUFFSSxXQUFhSixFQUFFMUQsZUFBaUJtTyxHQUFZekssRUFBRXpELGtCQUMvRixFQW1CQVAsRUFBT0MsUUFBVSxDQUFFMkcsT0FBTTlELFVBakJULFNBQVVtQixFQUFPa0MsRUFBWW9JLEVBQUtqSSxFQUFTaUksR0FDekQsSUFBSS9ILEdBQU8sRUFDUHhDLEVBQUlDLEVBRVIsSUFBSyxJQUFJK0YsRUFBSSxFQUFHQSxFQUFJaEcsRUFBRTNELFVBQ3BCbUcsR0FBUXhDLEVBQUVhLFNBQVcrQixFQUFNNUMsSUFFdkJ3QyxHQUh5QndELEtBTTFCeEQsRUFHSEYsSUFGQUgsR0FJSixFLFVDckNBLE1BQU0xRCxFQUFXdkMsT0FBT0MsT0FBTyxDQUk3QnlJLGFBQWM4RixHQUFRLEdBTXRCNUYsWUFBYTRGLEdBQVEsS0FJckJoTixLQUFNeUQsR0FBUSxFQUtkc0gsU0FBVSxJQUlWQyxLQUFNLEtBTU41SSxNQUFPLEtBR1AzQixVQUFXLElBR1hpSCxrQkFBbUIsRUFLbkJXLFNBQVUsS0FHWi9KLEVBQU9DLFFBQVV3QyxDLGdCQzNDakIsTUFBTUQsRUFBUyxFQUFRLEtBRWpCQyxFQUFXdkMsT0FBT0MsT0FBTyxDQUM3Qm1ILE9BQVEsS0FDUjVCLE9BQVEsS0FDUmlELE9BQVEsR0FDUkUsTUFBTyxLQUNQOEYsT0FBUSxJQStCVjNPLEVBQU9DLFFBQVUsQ0FBRWdILFdBNUJuQixTQUFxQnlCLEdBQ25CLE9BQU9sRyxFQUFRLENBQUMsRUFBR0MsRUFBVWlHLEVBQy9CLEVBMEIrQjJGLFlBeEIvQixTQUFzQjNGLEdBQ3BCLElBQUlrRyxFQUFRbEcsRUFBT3BCLE9BQ2Z1SCxFQUFRbkcsRUFBT2hELE9BQ2ZpRCxFQUFTRCxFQUFPQyxPQUFTLEVBQUlsRyxFQUFTa0csT0FBU0QsRUFBT0MsT0FDdERzQixFQUFLNEUsRUFBTXBMLElBQUlwQixFQUFJdU0sRUFBTW5MLElBQUlwQixFQUM3QjhILEVBQUswRSxFQUFNcEwsSUFBSWxCLEVBQUlxTSxFQUFNbkwsSUFBSWxCLEVBQzdCb0ssRUFBSS9JLEtBQUs2RyxLQUFLUixFQUFLQSxFQUFLRSxFQUFLQSxHQUV2QixJQUFOd0MsSUFDQTFDLEdBQU1yRyxLQUFLRyxTQUFXLElBQU8sR0FDN0JvRyxHQUFNdkcsS0FBS0csU0FBVyxJQUFPLEdBQzdCNEksRUFBSS9JLEtBQUs2RyxLQUFLUixFQUFLQSxFQUFLRSxFQUFLQSxJQUdqQyxJQUFJMkUsRUFBSW5DLEVBQUloRSxFQUNSRSxJQUFXSCxFQUFPRyxPQUFTSCxFQUFPRyxNQUFRLEVBQUtwRyxFQUFTcUcsWUFBY0osRUFBT0csT0FBU2lHLEVBQUluQyxFQUFJakUsRUFBT2lHLE9BRXpHQyxFQUFNeE0sTUFBTUMsR0FBS3dHLEVBQVFvQixFQUN6QjJFLEVBQU14TSxNQUFNRyxHQUFLc0csRUFBUXNCLEVBRXpCMEUsRUFBTXpNLE1BQU1DLEdBQUt3RyxFQUFRb0IsRUFDekI0RSxFQUFNek0sTUFBTUcsR0FBS3NHLEVBQVFzQixDQUMzQixFLFVDcENBbkssRUFBT0MsUUFBVSxTQUFVdU4sRUFBSXpJLEdBWTdCLE9BTGEsT0FMWHlJLEVBRFEsTUFBTkEsRUFDRyxDQUFFeEIsR0FBSSxFQUFHRyxHQUFJLEVBQUd1QixFQUFHM0ksRUFBR2dLLFFBQVNwQixFQUFHNUksRUFBR2lLLFVBRXJDLENBQUVoRCxHQUFJd0IsRUFBR3hCLEdBQUlJLEdBQUlvQixFQUFHcEIsR0FBSUQsR0FBSXFCLEVBQUdyQixHQUFJRyxHQUFJa0IsRUFBR2xCLEdBQUlvQixFQUFHRixFQUFHRSxFQUFHQyxFQUFHSCxFQUFHRyxJQUc3RHZCLEtBQWNvQixFQUFHcEIsR0FBS29CLEVBQUd4QixHQUFLd0IsRUFBR0UsR0FDNUIsTUFBUkYsRUFBR0UsSUFBYUYsRUFBR0UsRUFBSUYsRUFBR3BCLEdBQUtvQixFQUFHeEIsSUFDekIsTUFBVHdCLEVBQUdsQixLQUFja0IsRUFBR2xCLEdBQUtrQixFQUFHckIsR0FBS3FCLEVBQUdHLEdBQzVCLE1BQVJILEVBQUdHLElBQWFILEVBQUdHLEVBQUlILEVBQUdsQixHQUFLa0IsRUFBR3JCLElBRS9CcUIsQ0FDVCxDLFVDYkF4TixFQUFPQyxRQUEyQixNQUFqQkMsT0FBT3NDLE9BQWlCdEMsT0FBT3NDLE9BQU95TSxLQUFNL08sUUFBVyxTQUFVaUosS0FBUStGLEdBS3hGLE9BSkFBLEVBQUt4TCxRQUFTd0YsSUFDWmhKLE9BQU9pUCxLQUFNakcsR0FBTXhGLFFBQVMwTCxHQUFLakcsRUFBSWlHLEdBQUtsRyxFQUFJa0csTUFHekNqRyxDQUNULEMsR0NMSWtHLEVBQTJCLENBQUMsRUNFNUJDLEVEQ0osU0FBU0MsRUFBb0JDLEdBRTVCLElBQUlDLEVBQWVKLEVBQXlCRyxHQUM1QyxRQUFxQjVPLElBQWpCNk8sRUFDSCxPQUFPQSxFQUFheFAsUUFHckIsSUFBSUQsRUFBU3FQLEVBQXlCRyxHQUFZLENBR2pEdlAsUUFBUyxDQUFDLEdBT1gsT0FIQXlQLEVBQW9CRixHQUFVeFAsRUFBUUEsRUFBT0MsUUFBU3NQLEdBRy9DdlAsRUFBT0MsT0FDZixDQ25CMEJzUCxDQUFvQixXIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3l0b3NjYXBlLWV1bGVyLy4vc3JjL2xheW91dC9kZWZhdWx0cy5qcyIsIndlYnBhY2s6Ly9jeXRvc2NhcGUtZXVsZXIvLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vY3l0b3NjYXBlLWV1bGVyLy4vc3JjL2V1bGVyL3F1YWR0cmVlL25vZGUuanMiLCJ3ZWJwYWNrOi8vY3l0b3NjYXBlLWV1bGVyLy4vc3JjL2V1bGVyL2RyYWcuanMiLCJ3ZWJwYWNrOi8vY3l0b3NjYXBlLWV1bGVyLy4vc3JjL2xheW91dC9pbmRleC5qcyIsIndlYnBhY2s6Ly9jeXRvc2NhcGUtZXVsZXIvLi9zcmMvZXVsZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vY3l0b3NjYXBlLWV1bGVyLy4vc3JjL2V1bGVyL3F1YWR0cmVlL2luc2VydFN0YWNrLmpzIiwid2VicGFjazovL2N5dG9zY2FwZS1ldWxlci8uL3NyYy9ldWxlci9pbnRlZ3JhdGUuanMiLCJ3ZWJwYWNrOi8vY3l0b3NjYXBlLWV1bGVyLy4vc3JjL2V1bGVyL3F1YWR0cmVlL2luZGV4LmpzIiwid2VicGFjazovL2N5dG9zY2FwZS1ldWxlci8uL3NyYy9sYXlvdXQvcG9zaXRpb24uanMiLCJ3ZWJwYWNrOi8vY3l0b3NjYXBlLWV1bGVyLy4vc3JjL2V1bGVyL2JvZHkuanMiLCJ3ZWJwYWNrOi8vY3l0b3NjYXBlLWV1bGVyLy4vc3JjL2V1bGVyL3RpY2suanMiLCJ3ZWJwYWNrOi8vY3l0b3NjYXBlLWV1bGVyLy4vc3JjL2xheW91dC90aWNrLmpzIiwid2VicGFjazovL2N5dG9zY2FwZS1ldWxlci8uL3NyYy9ldWxlci9kZWZhdWx0cy5qcyIsIndlYnBhY2s6Ly9jeXRvc2NhcGUtZXVsZXIvLi9zcmMvZXVsZXIvc3ByaW5nLmpzIiwid2VicGFjazovL2N5dG9zY2FwZS1ldWxlci8uL3NyYy9sYXlvdXQvbWFrZS1iYi5qcyIsIndlYnBhY2s6Ly9jeXRvc2NhcGUtZXVsZXIvLi9zcmMvYXNzaWduLmpzIiwid2VicGFjazovL2N5dG9zY2FwZS1ldWxlci93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9jeXRvc2NhcGUtZXVsZXIvd2VicGFjay9zdGFydHVwIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGdlbmVyYWwgZGVmYXVsdCBvcHRpb25zIGZvciBmb3JjZS1kaXJlY3RlZCBsYXlvdXRcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuZnJlZXplKHtcbiAgYW5pbWF0ZTogdHJ1ZSwgLy8gd2hldGhlciB0byBzaG93IHRoZSBsYXlvdXQgYXMgaXQncyBydW5uaW5nOyBzcGVjaWFsICdlbmQnIHZhbHVlIG1ha2VzIHRoZSBsYXlvdXQgYW5pbWF0ZSBsaWtlIGEgZGlzY3JldGUgbGF5b3V0XG4gIHJlZnJlc2g6IDEwLCAvLyBudW1iZXIgb2YgdGlja3MgcGVyIGZyYW1lOyBoaWdoZXIgaXMgZmFzdGVyIGJ1dCBtb3JlIGplcmt5XG4gIG1heEl0ZXJhdGlvbnM6IDEwMDAsIC8vIG1heCBpdGVyYXRpb25zIGJlZm9yZSB0aGUgbGF5b3V0IHdpbGwgYmFpbCBvdXRcbiAgbWF4U2ltdWxhdGlvblRpbWU6IDQwMDAsIC8vIG1heCBsZW5ndGggaW4gbXMgdG8gcnVuIHRoZSBsYXlvdXRcbiAgdW5ncmFiaWZ5V2hpbGVTaW11bGF0aW5nOiBmYWxzZSwgLy8gc28geW91IGNhbid0IGRyYWcgbm9kZXMgZHVyaW5nIGxheW91dFxuICBmaXQ6IHRydWUsIC8vIG9uIGV2ZXJ5IGxheW91dCByZXBvc2l0aW9uIG9mIG5vZGVzLCBmaXQgdGhlIHZpZXdwb3J0XG4gIHBhZGRpbmc6IDMwLCAvLyBwYWRkaW5nIGFyb3VuZCB0aGUgc2ltdWxhdGlvblxuICBib3VuZGluZ0JveDogdW5kZWZpbmVkLCAvLyBjb25zdHJhaW4gbGF5b3V0IGJvdW5kczsgeyB4MSwgeTEsIHgyLCB5MiB9IG9yIHsgeDEsIHkxLCB3LCBoIH1cblxuICAvLyBsYXlvdXQgZXZlbnQgY2FsbGJhY2tzXG4gIHJlYWR5OiBmdW5jdGlvbigpe30sIC8vIG9uIGxheW91dHJlYWR5XG4gIHN0b3A6IGZ1bmN0aW9uKCl7fSwgLy8gb24gbGF5b3V0c3RvcFxuXG4gIC8vIHBvc2l0aW9uaW5nIG9wdGlvbnNcbiAgcmFuZG9taXplOiBmYWxzZSwgLy8gdXNlIHJhbmRvbSBub2RlIHBvc2l0aW9ucyBhdCBiZWdpbm5pbmcgb2YgbGF5b3V0XG4gIFxuICAvLyBpbmZpbml0ZSBsYXlvdXQgb3B0aW9uc1xuICBpbmZpbml0ZTogZmFsc2UgLy8gb3ZlcnJpZGVzIGFsbCBvdGhlciBvcHRpb25zIGZvciBhIGZvcmNlcy1hbGwtdGhlLXRpbWUgbW9kZVxufSk7XG4iLCJjb25zdCBFdWxlciA9IHJlcXVpcmUoJy4vZXVsZXInKTtcblxuLy8gcmVnaXN0ZXJzIHRoZSBleHRlbnNpb24gb24gYSBjeXRvc2NhcGUgbGliIHJlZlxubGV0IHJlZ2lzdGVyID0gZnVuY3Rpb24oIGN5dG9zY2FwZSApe1xuICBpZiggIWN5dG9zY2FwZSApeyByZXR1cm47IH0gLy8gY2FuJ3QgcmVnaXN0ZXIgaWYgY3l0b3NjYXBlIHVuc3BlY2lmaWVkXG5cbiAgY3l0b3NjYXBlKCAnbGF5b3V0JywgJ2V1bGVyJywgRXVsZXIgKTsgLy8gcmVnaXN0ZXIgd2l0aCBjeXRvc2NhcGUuanNcbn07XG5cbmlmKCB0eXBlb2YgY3l0b3NjYXBlICE9PSAndW5kZWZpbmVkJyApeyAvLyBleHBvc2UgdG8gZ2xvYmFsIGN5dG9zY2FwZSAoaS5lLiB3aW5kb3cuY3l0b3NjYXBlKVxuICByZWdpc3RlciggY3l0b3NjYXBlICk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcmVnaXN0ZXI7XG4iLCIvKipcbiAqIEludGVybmFsIGRhdGEgc3RydWN0dXJlIHRvIHJlcHJlc2VudCAyRCBRdWFkVHJlZSBub2RlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gTm9kZSgpIHtcbiAgLy8gYm9keSBzdG9yZWQgaW5zaWRlIHRoaXMgbm9kZS4gSW4gcXVhZCB0cmVlIG9ubHkgbGVhZiBub2RlcyAoYnkgY29uc3RydWN0aW9uKVxuICAvLyBjb250YWluIGJvaWRlczpcbiAgdGhpcy5ib2R5ID0gbnVsbDtcblxuICAvLyBDaGlsZCBub2RlcyBhcmUgc3RvcmVkIGluIHF1YWRzLiBFYWNoIHF1YWQgaXMgcHJlc2VudGVkIGJ5IG51bWJlcjpcbiAgLy8gMCB8IDFcbiAgLy8gLS0tLS1cbiAgLy8gMiB8IDNcbiAgdGhpcy5xdWFkMCA9IG51bGw7XG4gIHRoaXMucXVhZDEgPSBudWxsO1xuICB0aGlzLnF1YWQyID0gbnVsbDtcbiAgdGhpcy5xdWFkMyA9IG51bGw7XG5cbiAgLy8gVG90YWwgbWFzcyBvZiBjdXJyZW50IG5vZGVcbiAgdGhpcy5tYXNzID0gMDtcblxuICAvLyBDZW50ZXIgb2YgbWFzcyBjb29yZGluYXRlc1xuICB0aGlzLm1hc3NYID0gMDtcbiAgdGhpcy5tYXNzWSA9IDA7XG5cbiAgLy8gYm91bmRpbmcgYm94IGNvb3JkaW5hdGVzXG4gIHRoaXMubGVmdCA9IDA7XG4gIHRoaXMudG9wID0gMDtcbiAgdGhpcy5ib3R0b20gPSAwO1xuICB0aGlzLnJpZ2h0ID0gMDtcbn07XG4iLCJjb25zdCBkZWZhdWx0Q29lZmYgPSAwLjAyO1xuXG5mdW5jdGlvbiBhcHBseURyYWcoIGJvZHksIG1hbnVhbERyYWdDb2VmZiApe1xuICBsZXQgZHJhZ0NvZWZmO1xuXG4gIGlmKCBtYW51YWxEcmFnQ29lZmYgIT0gbnVsbCApe1xuICAgIGRyYWdDb2VmZiA9IG1hbnVhbERyYWdDb2VmZjtcbiAgfSBlbHNlIGlmKCBib2R5LmRyYWdDb2VmZiAhPSBudWxsICl7XG4gICAgZHJhZ0NvZWZmID0gYm9keS5kcmFnQ29lZmY7XG4gIH0gZWxzZSB7XG4gICAgZHJhZ0NvZWZmID0gZGVmYXVsdENvZWZmO1xuICB9XG5cbiAgYm9keS5mb3JjZS54IC09IGRyYWdDb2VmZiAqIGJvZHkudmVsb2NpdHkueDtcbiAgYm9keS5mb3JjZS55IC09IGRyYWdDb2VmZiAqIGJvZHkudmVsb2NpdHkueTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7IGFwcGx5RHJhZyB9O1xuIiwiLyoqXG5BIGdlbmVyaWMgY29udGludW91cyBsYXlvdXQgY2xhc3NcbiovXG5cbmNvbnN0IGFzc2lnbiA9IHJlcXVpcmUoJy4uL2Fzc2lnbicpO1xuY29uc3QgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJyk7XG5jb25zdCBtYWtlQm91bmRpbmdCb3ggPSByZXF1aXJlKCcuL21ha2UtYmInKTtcbmNvbnN0IHsgc2V0SW5pdGlhbFBvc2l0aW9uU3RhdGUsIHJlZnJlc2hQb3NpdGlvbnMsIGdldE5vZGVQb3NpdGlvbkRhdGEgfSA9IHJlcXVpcmUoJy4vcG9zaXRpb24nKTtcbmNvbnN0IHsgbXVsdGl0aWNrIH0gPSByZXF1aXJlKCcuL3RpY2snKTtcblxuY2xhc3MgTGF5b3V0IHtcbiAgY29uc3RydWN0b3IoIG9wdGlvbnMgKXtcbiAgICBsZXQgbyA9IHRoaXMub3B0aW9ucyA9IGFzc2lnbigge30sIGRlZmF1bHRzLCBvcHRpb25zICk7XG5cblx0XHRsZXQgbm9kZXMgPSBvLmVsZXMubm9kZXMoKTtcblx0XHQvLyBwcmV2ZW50IGluZmluaXRlIGxvb3AgYW5kIG1lbW9yeSBvdmVyZmxvdyB3aGVuIG5vZGVzIG9jY3VweSB0aGUgc2FtZSBwb3NpdGlvblxuXHRcdGlmKCFvLnJhbmRvbWl6ZSlcblx0XHR7XG5cdFx0XHRub2RlcyA9IG5vZGVzLnNvcnQoKGEsYik9PmEucG9zaXRpb24oKS54LWIucG9zaXRpb24oKS54KTtcblx0XHRcdGNvbnN0IHByZXYgPSB7eDogMCwgeTogMH07XG5cdFx0XHRjb25zdCBwb3MgPSB7fTtcblx0XHRcdG5vZGVzLmZvckVhY2gobj0+XG5cdFx0XHR7XG5cdFx0XHRcdE9iamVjdC5hc3NpZ24ocG9zLG4ucG9zaXRpb24oKSk7XG5cdFx0XHRcdGlmKE1hdGguYWJzKHByZXYueCAtIHBvcy54KSA8IG8udGhldGEgJiYgTWF0aC5hYnMocHJldi55IC0gcG9zLnkpIDwgby50aGV0YSlcblx0XHRcdFx0e1xuXHRcdFx0XHRcdG4ucG9zaXRpb24oe3g6IE1hdGgucmFuZG9tKCkqMTAwLCB5OiBNYXRoLnJhbmRvbSgpKjEwMH0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdE9iamVjdC5hc3NpZ24ocHJldixwb3MpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG4gICAgbGV0IHMgPSB0aGlzLnN0YXRlID0gYXNzaWduKCB7fSwgbywge1xuICAgICAgbGF5b3V0OiB0aGlzLFxuICAgICAgbm9kZXMsXG4gICAgICBlZGdlczogby5lbGVzLmVkZ2VzKCksXG4gICAgICB0aWNrSW5kZXg6IDAsXG4gICAgICBmaXJzdFVwZGF0ZTogdHJ1ZVxuICAgIH0gKTtcblxuICAgIHMuYW5pbWF0ZUVuZCA9IG8uYW5pbWF0ZSAmJiBvLmFuaW1hdGUgPT09ICdlbmQnO1xuICAgIHMuYW5pbWF0ZUNvbnRpbnVvdXNseSA9IG8uYW5pbWF0ZSAmJiAhcy5hbmltYXRlRW5kO1xuICB9XG5cbiAgcnVuKCl7XG4gICAgbGV0IGwgPSB0aGlzO1xuICAgIGxldCBzID0gdGhpcy5zdGF0ZTtcblxuICAgIHMudGlja0luZGV4ID0gMDtcbiAgICBzLmZpcnN0VXBkYXRlID0gdHJ1ZTtcbiAgICBzLnN0YXJ0VGltZSA9IERhdGUubm93KCk7XG4gICAgcy5ydW5uaW5nID0gdHJ1ZTtcblxuICAgIHMuY3VycmVudEJvdW5kaW5nQm94ID0gbWFrZUJvdW5kaW5nQm94KCBzLmJvdW5kaW5nQm94LCBzLmN5ICk7XG5cbiAgICBpZiggcy5yZWFkeSApeyBsLm9uZSggJ3JlYWR5Jywgcy5yZWFkeSApOyB9XG4gICAgaWYoIHMuc3RvcCApeyBsLm9uZSggJ3N0b3AnLCBzLnN0b3AgKTsgfVxuXG4gICAgcy5ub2Rlcy5mb3JFYWNoKCBuID0+IHNldEluaXRpYWxQb3NpdGlvblN0YXRlKCBuLCBzICkgKTtcblxuICAgIGwucHJlcnVuKCBzICk7XG5cbiAgICBpZiggcy5hbmltYXRlQ29udGludW91c2x5ICl7XG4gICAgICBsZXQgdW5ncmFiaWZ5ID0gbm9kZSA9PiB7XG4gICAgICAgIGlmKCAhcy51bmdyYWJpZnlXaGlsZVNpbXVsYXRpbmcgKXsgcmV0dXJuOyB9XG5cbiAgICAgICAgbGV0IGdyYWJiYWJsZSA9IGdldE5vZGVQb3NpdGlvbkRhdGEoIG5vZGUsIHMgKS5ncmFiYmFibGUgPSBub2RlLmdyYWJiYWJsZSgpO1xuXG4gICAgICAgIGlmKCBncmFiYmFibGUgKXtcbiAgICAgICAgICBub2RlLnVuZ3JhYmlmeSgpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBsZXQgcmVncmFiaWZ5ID0gbm9kZSA9PiB7XG4gICAgICAgIGlmKCAhcy51bmdyYWJpZnlXaGlsZVNpbXVsYXRpbmcgKXsgcmV0dXJuOyB9XG5cbiAgICAgICAgbGV0IGdyYWJiYWJsZSA9IGdldE5vZGVQb3NpdGlvbkRhdGEoIG5vZGUsIHMgKS5ncmFiYmFibGU7XG5cbiAgICAgICAgaWYoIGdyYWJiYWJsZSApe1xuICAgICAgICAgIG5vZGUuZ3JhYmlmeSgpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBsZXQgdXBkYXRlR3JhYlN0YXRlID0gbm9kZSA9PiBnZXROb2RlUG9zaXRpb25EYXRhKCBub2RlLCBzICkuZ3JhYmJlZCA9IG5vZGUuZ3JhYmJlZCgpO1xuXG4gICAgICBsZXQgb25HcmFiID0gZnVuY3Rpb24oeyB0YXJnZXQgfSl7XG4gICAgICAgIHVwZGF0ZUdyYWJTdGF0ZSggdGFyZ2V0ICk7XG4gICAgICB9O1xuXG4gICAgICBsZXQgb25GcmVlID0gb25HcmFiO1xuXG4gICAgICBsZXQgb25EcmFnID0gZnVuY3Rpb24oeyB0YXJnZXQgfSl7XG4gICAgICAgIGxldCBwID0gZ2V0Tm9kZVBvc2l0aW9uRGF0YSggdGFyZ2V0LCBzICk7XG4gICAgICAgIGxldCB0cCA9IHRhcmdldC5wb3NpdGlvbigpO1xuXG4gICAgICAgIHAueCA9IHRwLng7XG4gICAgICAgIHAueSA9IHRwLnk7XG4gICAgICB9O1xuXG4gICAgICBsZXQgbGlzdGVuVG9HcmFiID0gbm9kZSA9PiB7XG4gICAgICAgIG5vZGUub24oJ2dyYWInLCBvbkdyYWIpO1xuICAgICAgICBub2RlLm9uKCdmcmVlJywgb25GcmVlKTtcbiAgICAgICAgbm9kZS5vbignZHJhZycsIG9uRHJhZyk7XG4gICAgICB9O1xuXG4gICAgICBsZXQgdW5saXN0ZW5Ub0dyYWIgPSBub2RlID0+IHtcbiAgICAgICAgbm9kZS5yZW1vdmVMaXN0ZW5lcignZ3JhYicsIG9uR3JhYik7XG4gICAgICAgIG5vZGUucmVtb3ZlTGlzdGVuZXIoJ2ZyZWUnLCBvbkZyZWUpO1xuICAgICAgICBub2RlLnJlbW92ZUxpc3RlbmVyKCdkcmFnJywgb25EcmFnKTtcbiAgICAgIH07XG5cbiAgICAgIGxldCBmaXQgPSAoKSA9PiB7XG4gICAgICAgIGlmKCBzLmZpdCAmJiBzLmFuaW1hdGVDb250aW51b3VzbHkgKXtcbiAgICAgICAgICBzLmN5LmZpdCggcy5wYWRkaW5nICk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGxldCBvbk5vdERvbmUgPSAoKSA9PiB7XG4gICAgICAgIHJlZnJlc2hQb3NpdGlvbnMoIHMubm9kZXMsIHMgKTtcbiAgICAgICAgZml0KCk7XG5cbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCBmcmFtZSApO1xuICAgICAgfTtcblxuICAgICAgbGV0IGZyYW1lID0gZnVuY3Rpb24oKXtcbiAgICAgICAgbXVsdGl0aWNrKCBzLCBvbk5vdERvbmUsIG9uRG9uZSApO1xuICAgICAgfTtcblxuICAgICAgbGV0IG9uRG9uZSA9ICgpID0+IHtcbiAgICAgICAgcmVmcmVzaFBvc2l0aW9ucyggcy5ub2RlcywgcyApO1xuICAgICAgICBmaXQoKTtcblxuICAgICAgICBzLm5vZGVzLmZvckVhY2goIG4gPT4ge1xuICAgICAgICAgIHJlZ3JhYmlmeSggbiApO1xuICAgICAgICAgIHVubGlzdGVuVG9HcmFiKCBuICk7XG4gICAgICAgIH0gKTtcblxuICAgICAgICBzLnJ1bm5pbmcgPSBmYWxzZTtcblxuICAgICAgICBsLmVtaXQoJ2xheW91dHN0b3AnKTtcbiAgICAgIH07XG5cbiAgICAgIGwuZW1pdCgnbGF5b3V0c3RhcnQnKTtcblxuICAgICAgcy5ub2Rlcy5mb3JFYWNoKCBuID0+IHtcbiAgICAgICAgdW5ncmFiaWZ5KCBuICk7XG4gICAgICAgIGxpc3RlblRvR3JhYiggbiApO1xuICAgICAgfSApO1xuXG4gICAgICBmcmFtZSgpOyAvLyBraWNrIG9mZlxuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgZG9uZSA9IGZhbHNlO1xuICAgICAgbGV0IG9uTm90RG9uZSA9ICgpID0+IHt9O1xuICAgICAgbGV0IG9uRG9uZSA9ICgpID0+IGRvbmUgPSB0cnVlO1xuXG4gICAgICB3aGlsZSggIWRvbmUgKXtcbiAgICAgICAgbXVsdGl0aWNrKCBzLCBvbk5vdERvbmUsIG9uRG9uZSApO1xuICAgICAgfVxuXG4gICAgICBzLmVsZXMubGF5b3V0UG9zaXRpb25zKCB0aGlzLCBzLCBub2RlID0+IHtcbiAgICAgICAgbGV0IHBkID0gZ2V0Tm9kZVBvc2l0aW9uRGF0YSggbm9kZSwgcyApO1xuXG4gICAgICAgIHJldHVybiB7IHg6IHBkLngsIHk6IHBkLnkgfTtcbiAgICAgIH0gKTtcbiAgICB9XG5cbiAgICBsLnBvc3RydW4oIHMgKTtcblxuICAgIHJldHVybiB0aGlzOyAvLyBjaGFpbmluZ1xuICB9XG5cbiAgcHJlcnVuKCl7fVxuICBwb3N0cnVuKCl7fVxuICB0aWNrKCl7fVxuXG4gIHN0b3AoKXtcbiAgICB0aGlzLnN0YXRlLnJ1bm5pbmcgPSBmYWxzZTtcblxuICAgIHJldHVybiB0aGlzOyAvLyBjaGFpbmluZ1xuICB9XG5cbiAgZGVzdHJveSgpe1xuICAgIHJldHVybiB0aGlzOyAvLyBjaGFpbmluZ1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTGF5b3V0O1xuIiwiLyoqXG5UaGUgaW1wbGVtZW50YXRpb24gb2YgdGhlIEV1bGVyIGxheW91dCBhbGdvcml0aG1cbiovXG5cbmNvbnN0IExheW91dCA9IHJlcXVpcmUoJy4uL2xheW91dCcpO1xuY29uc3QgYXNzaWduID0gcmVxdWlyZSgnLi4vYXNzaWduJyk7XG5jb25zdCBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vZGVmYXVsdHMnKTtcbmNvbnN0IHsgdGljayB9ID0gcmVxdWlyZSgnLi90aWNrJyk7XG5jb25zdCB7IG1ha2VRdWFkdHJlZSB9ID0gcmVxdWlyZSgnLi9xdWFkdHJlZScpO1xuY29uc3QgeyBtYWtlQm9keSB9ID0gcmVxdWlyZSgnLi9ib2R5Jyk7XG5jb25zdCB7IG1ha2VTcHJpbmcgfSA9IHJlcXVpcmUoJy4vc3ByaW5nJyk7XG5jb25zdCBpc0ZuID0gZm4gPT4gdHlwZW9mIGZuID09PSAnZnVuY3Rpb24nO1xuY29uc3QgaXNQYXJlbnQgPSBuID0+IG4uaXNQYXJlbnQoKTtcbmNvbnN0IG5vdElzUGFyZW50ID0gbiA9PiAhaXNQYXJlbnQobik7XG5jb25zdCBpc0xvY2tlZCA9IG4gPT4gbi5sb2NrZWQoKTtcbmNvbnN0IG5vdElzTG9ja2VkID0gbiA9PiAhaXNMb2NrZWQobik7XG5jb25zdCBpc1BhcmVudEVkZ2UgPSBlID0+IGlzUGFyZW50KCBlLnNvdXJjZSgpICkgfHwgaXNQYXJlbnQoIGUudGFyZ2V0KCkgKTtcbmNvbnN0IG5vdElzUGFyZW50RWRnZSA9IGUgPT4gIWlzUGFyZW50RWRnZShlKTtcbmNvbnN0IGdldEJvZHkgPSBuID0+IG4uc2NyYXRjaCgnZXVsZXInKS5ib2R5O1xuY29uc3QgZ2V0Tm9uUGFyZW50RGVzY2VuZGFudHMgPSBuID0+IGlzUGFyZW50KG4pID8gbi5kZXNjZW5kYW50cygpLmZpbHRlciggbm90SXNQYXJlbnQgKSA6IG47XG5cbmNvbnN0IGdldFNjcmF0Y2ggPSBlbCA9PiB7XG4gIGxldCBzY3JhdGNoID0gZWwuc2NyYXRjaCgnZXVsZXInKTtcblxuICBpZiggIXNjcmF0Y2ggKXtcbiAgICBzY3JhdGNoID0ge307XG5cbiAgICBlbC5zY3JhdGNoKCdldWxlcicsIHNjcmF0Y2gpO1xuICB9XG5cbiAgcmV0dXJuIHNjcmF0Y2g7XG59O1xuXG5jb25zdCBvcHRGbiA9ICggb3B0LCBlbGUgKSA9PiB7XG4gIGlmKCBpc0ZuKCBvcHQgKSApe1xuICAgIHJldHVybiBvcHQoIGVsZSApO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBvcHQ7XG4gIH1cbn07XG5cbmNsYXNzIEV1bGVyIGV4dGVuZHMgTGF5b3V0IHtcbiAgY29uc3RydWN0b3IoIG9wdGlvbnMgKXtcbiAgICBzdXBlciggYXNzaWduKCB7fSwgZGVmYXVsdHMsIG9wdGlvbnMgKSApO1xuICB9XG5cbiAgcHJlcnVuKCBzdGF0ZSApe1xuICAgIGxldCBzID0gc3RhdGU7XG5cbiAgICBzLnF1YWR0cmVlID0gbWFrZVF1YWR0cmVlKCk7XG5cbiAgICBsZXQgYm9kaWVzID0gcy5ib2RpZXMgPSBbXTtcblxuICAgIC8vIHJlZ3VsYXIgbm9kZXNcbiAgICBzLm5vZGVzLmZpbHRlciggbiA9PiBub3RJc1BhcmVudChuKSApLmZvckVhY2goIG4gPT4ge1xuICAgICAgbGV0IHNjcmF0Y2ggPSBnZXRTY3JhdGNoKCBuICk7XG5cbiAgICAgIGxldCBib2R5ID0gbWFrZUJvZHkoe1xuICAgICAgICBwb3M6IHsgeDogc2NyYXRjaC54LCB5OiBzY3JhdGNoLnkgfSxcbiAgICAgICAgbWFzczogb3B0Rm4oIHMubWFzcywgbiApLFxuICAgICAgICBsb2NrZWQ6IHNjcmF0Y2gubG9ja2VkXG4gICAgICB9KTtcblxuICAgICAgYm9keS5fY3lOb2RlID0gbjtcblxuICAgICAgc2NyYXRjaC5ib2R5ID0gYm9keTtcblxuICAgICAgYm9keS5fc2NyYXRjaCA9IHNjcmF0Y2g7XG5cbiAgICAgIGJvZGllcy5wdXNoKCBib2R5ICk7XG4gICAgfSApO1xuXG4gICAgbGV0IHNwcmluZ3MgPSBzLnNwcmluZ3MgPSBbXTtcblxuICAgIC8vIHJlZ3VsYXIgZWRnZSBzcHJpbmdzXG4gICAgcy5lZGdlcy5maWx0ZXIoIG5vdElzUGFyZW50RWRnZSApLmZvckVhY2goIGUgPT4ge1xuICAgICAgbGV0IHNwcmluZyA9IG1ha2VTcHJpbmcoe1xuICAgICAgICBzb3VyY2U6IGdldEJvZHkoIGUuc291cmNlKCkgKSxcbiAgICAgICAgdGFyZ2V0OiBnZXRCb2R5KCBlLnRhcmdldCgpICksXG4gICAgICAgIGxlbmd0aDogb3B0Rm4oIHMuc3ByaW5nTGVuZ3RoLCBlICksXG4gICAgICAgIGNvZWZmOiBvcHRGbiggcy5zcHJpbmdDb2VmZiwgZSApXG4gICAgICB9KTtcblxuICAgICAgc3ByaW5nLl9jeUVkZ2UgPSBlO1xuXG4gICAgICBsZXQgc2NyYXRjaCA9IGdldFNjcmF0Y2goIGUgKTtcblxuICAgICAgc3ByaW5nLl9zY3JhdGNoID0gc2NyYXRjaDtcblxuICAgICAgc2NyYXRjaC5zcHJpbmcgPSBzcHJpbmc7XG5cbiAgICAgIHNwcmluZ3MucHVzaCggc3ByaW5nICk7XG4gICAgfSApO1xuXG4gICAgLy8gY29tcG91bmQgZWRnZSBzcHJpbmdzXG4gICAgcy5lZGdlcy5maWx0ZXIoIGlzUGFyZW50RWRnZSApLmZvckVhY2goIGUgPT4ge1xuICAgICAgbGV0IHNvdXJjZXMgPSBnZXROb25QYXJlbnREZXNjZW5kYW50cyggZS5zb3VyY2UoKSApO1xuICAgICAgbGV0IHRhcmdldHMgPSBnZXROb25QYXJlbnREZXNjZW5kYW50cyggZS50YXJnZXQoKSApO1xuXG4gICAgICAvLyBqdXN0IGFkZCBvbmUgc3ByaW5nIGZvciBwZXJmXG4gICAgICBzb3VyY2VzID0gWyBzb3VyY2VzWzBdIF07XG4gICAgICB0YXJnZXRzID0gWyB0YXJnZXRzWzBdIF07XG5cbiAgICAgIHNvdXJjZXMuZm9yRWFjaCggc3JjID0+IHtcbiAgICAgICAgdGFyZ2V0cy5mb3JFYWNoKCB0Z3QgPT4ge1xuICAgICAgICAgIHNwcmluZ3MucHVzaCggbWFrZVNwcmluZyh7XG4gICAgICAgICAgICBzb3VyY2U6IGdldEJvZHkoIHNyYyApLFxuICAgICAgICAgICAgdGFyZ2V0OiBnZXRCb2R5KCB0Z3QgKSxcbiAgICAgICAgICAgIGxlbmd0aDogb3B0Rm4oIHMuc3ByaW5nTGVuZ3RoLCBlICksXG4gICAgICAgICAgICBjb2VmZjogb3B0Rm4oIHMuc3ByaW5nQ29lZmYsIGUgKVxuICAgICAgICAgIH0pICk7XG4gICAgICAgIH0gKTtcbiAgICAgIH0gKTtcbiAgICB9ICk7XG4gIH1cblxuICB0aWNrKCBzdGF0ZSApe1xuICAgIGxldCBtb3ZlbWVudCA9IHRpY2soIHN0YXRlICk7XG5cbiAgICBsZXQgaXNEb25lID0gbW92ZW1lbnQgPD0gc3RhdGUubW92ZW1lbnRUaHJlc2hvbGQ7XG5cbiAgICByZXR1cm4gaXNEb25lO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRXVsZXI7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IEluc2VydFN0YWNrO1xuXG4vKipcbiAqIE91ciBpbXBsbWVudGF0aW9uIG9mIFF1YWRUcmVlIGlzIG5vbi1yZWN1cnNpdmUgdG8gYXZvaWQgR0MgaGl0XG4gKiBUaGlzIGRhdGEgc3RydWN0dXJlIHJlcHJlc2VudCBzdGFjayBvZiBlbGVtZW50c1xuICogd2hpY2ggd2UgYXJlIHRyeWluZyB0byBpbnNlcnQgaW50byBxdWFkIHRyZWUuXG4gKi9cbmZ1bmN0aW9uIEluc2VydFN0YWNrICgpIHtcbiAgICB0aGlzLnN0YWNrID0gW107XG4gICAgdGhpcy5wb3BJZHggPSAwO1xufVxuXG5JbnNlcnRTdGFjay5wcm90b3R5cGUgPSB7XG4gICAgaXNFbXB0eTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBvcElkeCA9PT0gMDtcbiAgICB9LFxuICAgIHB1c2g6IGZ1bmN0aW9uIChub2RlLCBib2R5KSB7XG4gICAgICAgIGxldCBpdGVtID0gdGhpcy5zdGFja1t0aGlzLnBvcElkeF07XG4gICAgICAgIGlmICghaXRlbSkge1xuICAgICAgICAgICAgLy8gd2UgYXJlIHRyeWluZyB0byBhdm9pZCBtZW1vcnkgcHJlc3N1ZTogY3JlYXRlIG5ldyBlbGVtZW50XG4gICAgICAgICAgICAvLyBvbmx5IHdoZW4gYWJzb2x1dGVseSBuZWNlc3NhcnlcbiAgICAgICAgICAgIHRoaXMuc3RhY2tbdGhpcy5wb3BJZHhdID0gbmV3IEluc2VydFN0YWNrRWxlbWVudChub2RlLCBib2R5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGl0ZW0ubm9kZSA9IG5vZGU7XG4gICAgICAgICAgICBpdGVtLmJvZHkgPSBib2R5O1xuICAgICAgICB9XG4gICAgICAgICsrdGhpcy5wb3BJZHg7XG4gICAgfSxcbiAgICBwb3A6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMucG9wSWR4ID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RhY2tbLS10aGlzLnBvcElkeF07XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHJlc2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMucG9wSWR4ID0gMDtcbiAgICB9XG59O1xuXG5mdW5jdGlvbiBJbnNlcnRTdGFja0VsZW1lbnQobm9kZSwgYm9keSkge1xuICAgIHRoaXMubm9kZSA9IG5vZGU7IC8vIFF1YWRUcmVlIG5vZGVcbiAgICB0aGlzLmJvZHkgPSBib2R5OyAvLyBwaHlzaWNhbCBib2R5IHdoaWNoIG5lZWRzIHRvIGJlIGluc2VydGVkIHRvIG5vZGVcbn1cbiIsIi8vIHVzZSBldWxlciBtZXRob2QgZm9yIGZvcmNlIGludGVncmF0aW9uIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRXVsZXJfbWV0aG9kXG4vLyByZXR1cm4gc3VtIG9mIHNxdWFyZWQgcG9zaXRpb24gZGVsdGFzXG5mdW5jdGlvbiBpbnRlZ3JhdGUoIGJvZGllcywgdGltZVN0ZXAgKXtcbiAgdmFyIGR4ID0gMCwgdHggPSAwLFxuICAgICAgZHkgPSAwLCB0eSA9IDAsXG4gICAgICBpLFxuICAgICAgbWF4ID0gYm9kaWVzLmxlbmd0aDtcblxuICBpZiAobWF4ID09PSAwKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICBmb3IgKGkgPSAwOyBpIDwgbWF4OyArK2kpIHtcbiAgICB2YXIgYm9keSA9IGJvZGllc1tpXSxcbiAgICAgICAgY29lZmYgPSB0aW1lU3RlcCAvIGJvZHkubWFzcztcblxuICAgIGlmKCBib2R5LmdyYWJiZWQgKXsgY29udGludWU7IH1cblxuICAgIGlmKCBib2R5LmxvY2tlZCApe1xuICAgICAgYm9keS52ZWxvY2l0eS54ID0gMDtcbiAgICAgIGJvZHkudmVsb2NpdHkueSA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJvZHkudmVsb2NpdHkueCArPSBjb2VmZiAqIGJvZHkuZm9yY2UueDtcbiAgICAgIGJvZHkudmVsb2NpdHkueSArPSBjb2VmZiAqIGJvZHkuZm9yY2UueTtcbiAgICB9XG5cbiAgICB2YXIgdnggPSBib2R5LnZlbG9jaXR5LngsXG4gICAgICAgIHZ5ID0gYm9keS52ZWxvY2l0eS55LFxuICAgICAgICB2ID0gTWF0aC5zcXJ0KHZ4ICogdnggKyB2eSAqIHZ5KTtcblxuICAgIGlmICh2ID4gMSkge1xuICAgICAgYm9keS52ZWxvY2l0eS54ID0gdnggLyB2O1xuICAgICAgYm9keS52ZWxvY2l0eS55ID0gdnkgLyB2O1xuICAgIH1cblxuICAgIGR4ID0gdGltZVN0ZXAgKiBib2R5LnZlbG9jaXR5Lng7XG4gICAgZHkgPSB0aW1lU3RlcCAqIGJvZHkudmVsb2NpdHkueTtcblxuICAgIGJvZHkucG9zLnggKz0gZHg7XG4gICAgYm9keS5wb3MueSArPSBkeTtcblxuICAgIHR4ICs9IE1hdGguYWJzKGR4KTsgdHkgKz0gTWF0aC5hYnMoZHkpO1xuICB9XG5cbiAgcmV0dXJuICh0eCAqIHR4ICsgdHkgKiB0eSkvbWF4O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHsgaW50ZWdyYXRlIH07XG4iLCIvLyBpbXBsIG9mIGJhcm5lcyBodXRcbi8vIGh0dHA6Ly93d3cuZWVjcy5iZXJrZWxleS5lZHUvfmRlbW1lbC9jczI2Ny9sZWN0dXJlMjYvbGVjdHVyZTI2Lmh0bWxcbi8vIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmFybmVzJUUyJTgwJTkzSHV0X3NpbXVsYXRpb25cblxuY29uc3QgTm9kZSA9IHJlcXVpcmUoJy4vbm9kZScpO1xuY29uc3QgSW5zZXJ0U3RhY2sgPSByZXF1aXJlKCcuL2luc2VydFN0YWNrJyk7XG5cbmNvbnN0IHJlc2V0VmVjID0gdiA9PiB7IHYueCA9IDA7IHYueSA9IDA7IH07XG5cbmNvbnN0IGlzU2FtZVBvc2l0aW9uID0gKHAxLCBwMikgPT4ge1xuICBsZXQgdGhyZXNob2xkID0gMWUtODtcbiAgbGV0IGR4ID0gTWF0aC5hYnMocDEueCAtIHAyLngpO1xuICBsZXQgZHkgPSBNYXRoLmFicyhwMS55IC0gcDIueSk7XG5cbiAgcmV0dXJuIGR4IDwgdGhyZXNob2xkICYmIGR5IDwgdGhyZXNob2xkO1xufTtcblxuZnVuY3Rpb24gbWFrZVF1YWR0cmVlKCl7XG4gIGxldCB1cGRhdGVRdWV1ZSA9IFtdLFxuICAgIGluc2VydFN0YWNrID0gbmV3IEluc2VydFN0YWNrKCksXG4gICAgbm9kZXNDYWNoZSA9IFtdLFxuICAgIGN1cnJlbnRJbkNhY2hlID0gMCxcbiAgICByb290ID0gbmV3Tm9kZSgpO1xuXG4gIGZ1bmN0aW9uIG5ld05vZGUoKSB7XG4gICAgLy8gVG8gYXZvaWQgcHJlc3N1cmUgb24gR0Mgd2UgcmV1c2Ugbm9kZXMuXG4gICAgbGV0IG5vZGUgPSBub2Rlc0NhY2hlW2N1cnJlbnRJbkNhY2hlXTtcbiAgICBpZiAobm9kZSkge1xuICAgICAgbm9kZS5xdWFkMCA9IG51bGw7XG4gICAgICBub2RlLnF1YWQxID0gbnVsbDtcbiAgICAgIG5vZGUucXVhZDIgPSBudWxsO1xuICAgICAgbm9kZS5xdWFkMyA9IG51bGw7XG4gICAgICBub2RlLmJvZHkgPSBudWxsO1xuICAgICAgbm9kZS5tYXNzID0gbm9kZS5tYXNzWCA9IG5vZGUubWFzc1kgPSAwO1xuICAgICAgbm9kZS5sZWZ0ID0gbm9kZS5yaWdodCA9IG5vZGUudG9wID0gbm9kZS5ib3R0b20gPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBub2RlID0gbmV3IE5vZGUoKTtcbiAgICAgIG5vZGVzQ2FjaGVbY3VycmVudEluQ2FjaGVdID0gbm9kZTtcbiAgICB9XG5cbiAgICArK2N1cnJlbnRJbkNhY2hlO1xuICAgIHJldHVybiBub2RlO1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlKCBzb3VyY2VCb2R5LCBncmF2aXR5LCB0aGV0YSwgcHVsbCApIHtcbiAgICBsZXQgcXVldWUgPSB1cGRhdGVRdWV1ZSxcbiAgICAgIHYsXG4gICAgICBkeCxcbiAgICAgIGR5LFxuICAgICAgciwgZnggPSAwLFxuICAgICAgZnkgPSAwLFxuICAgICAgcXVldWVMZW5ndGggPSAxLFxuICAgICAgc2hpZnRJZHggPSAwLFxuICAgICAgcHVzaElkeCA9IDE7XG5cbiAgICBxdWV1ZVswXSA9IHJvb3Q7XG5cbiAgICByZXNldFZlYyggc291cmNlQm9keS5mb3JjZSApO1xuXG4gICAgbGV0IHB4ID0gLXNvdXJjZUJvZHkucG9zLng7XG4gICAgbGV0IHB5ID0gLXNvdXJjZUJvZHkucG9zLnk7XG4gICAgbGV0IHByID0gTWF0aC5zcXJ0KHB4ICogcHggKyBweSAqIHB5KTtcbiAgICBsZXQgcHYgPSBzb3VyY2VCb2R5Lm1hc3MgKiBwdWxsIC8gcHI7XG5cbiAgICBmeCArPSBwdiAqIHB4O1xuICAgIGZ5ICs9IHB2ICogcHk7XG5cbiAgICB3aGlsZSAocXVldWVMZW5ndGgpIHtcbiAgICAgIGxldCBub2RlID0gcXVldWVbc2hpZnRJZHhdLFxuICAgICAgICBib2R5ID0gbm9kZS5ib2R5O1xuXG4gICAgICBxdWV1ZUxlbmd0aCAtPSAxO1xuICAgICAgc2hpZnRJZHggKz0gMTtcbiAgICAgIGxldCBkaWZmZXJlbnRCb2R5ID0gKGJvZHkgIT09IHNvdXJjZUJvZHkpO1xuICAgICAgaWYgKGJvZHkgJiYgZGlmZmVyZW50Qm9keSkge1xuICAgICAgICAvLyBJZiB0aGUgY3VycmVudCBub2RlIGlzIGEgbGVhZiBub2RlIChhbmQgaXQgaXMgbm90IHNvdXJjZSBib2R5KSxcbiAgICAgICAgLy8gY2FsY3VsYXRlIHRoZSBmb3JjZSBleGVydGVkIGJ5IHRoZSBjdXJyZW50IG5vZGUgb24gYm9keSwgYW5kIGFkZCB0aGlzXG4gICAgICAgIC8vIGFtb3VudCB0byBib2R5J3MgbmV0IGZvcmNlLlxuICAgICAgICBkeCA9IGJvZHkucG9zLnggLSBzb3VyY2VCb2R5LnBvcy54O1xuICAgICAgICBkeSA9IGJvZHkucG9zLnkgLSBzb3VyY2VCb2R5LnBvcy55O1xuICAgICAgICByID0gTWF0aC5zcXJ0KGR4ICogZHggKyBkeSAqIGR5KTtcblxuICAgICAgICBpZiAociA9PT0gMCkge1xuICAgICAgICAgIC8vIFBvb3IgbWFuJ3MgcHJvdGVjdGlvbiBhZ2FpbnN0IHplcm8gZGlzdGFuY2UuXG4gICAgICAgICAgZHggPSAoTWF0aC5yYW5kb20oKSAtIDAuNSkgLyA1MDtcbiAgICAgICAgICBkeSA9IChNYXRoLnJhbmRvbSgpIC0gMC41KSAvIDUwO1xuICAgICAgICAgIHIgPSBNYXRoLnNxcnQoZHggKiBkeCArIGR5ICogZHkpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhpcyBpcyBzdGFuZGFyZCBncmF2aXRpb24gZm9yY2UgY2FsY3VsYXRpb24gYnV0IHdlIGRpdmlkZVxuICAgICAgICAvLyBieSByXjMgdG8gc2F2ZSB0d28gb3BlcmF0aW9ucyB3aGVuIG5vcm1hbGl6aW5nIGZvcmNlIHZlY3Rvci5cbiAgICAgICAgdiA9IGdyYXZpdHkgKiBib2R5Lm1hc3MgKiBzb3VyY2VCb2R5Lm1hc3MgLyAociAqIHIgKiByKTtcbiAgICAgICAgZnggKz0gdiAqIGR4O1xuICAgICAgICBmeSArPSB2ICogZHk7XG4gICAgICB9IGVsc2UgaWYgKGRpZmZlcmVudEJvZHkpIHtcbiAgICAgICAgLy8gT3RoZXJ3aXNlLCBjYWxjdWxhdGUgdGhlIHJhdGlvIHMgLyByLCAgd2hlcmUgcyBpcyB0aGUgd2lkdGggb2YgdGhlIHJlZ2lvblxuICAgICAgICAvLyByZXByZXNlbnRlZCBieSB0aGUgaW50ZXJuYWwgbm9kZSwgYW5kIHIgaXMgdGhlIGRpc3RhbmNlIGJldHdlZW4gdGhlIGJvZHlcbiAgICAgICAgLy8gYW5kIHRoZSBub2RlJ3MgY2VudGVyLW9mLW1hc3NcbiAgICAgICAgZHggPSBub2RlLm1hc3NYIC8gbm9kZS5tYXNzIC0gc291cmNlQm9keS5wb3MueDtcbiAgICAgICAgZHkgPSBub2RlLm1hc3NZIC8gbm9kZS5tYXNzIC0gc291cmNlQm9keS5wb3MueTtcbiAgICAgICAgciA9IE1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSk7XG5cbiAgICAgICAgaWYgKHIgPT09IDApIHtcbiAgICAgICAgICAvLyBTb3JyeSBhYm91dCBjb2RlIGR1cGx1Y2F0aW9uLiBJIGRvbid0IHdhbnQgdG8gY3JlYXRlIG1hbnkgZnVuY3Rpb25zXG4gICAgICAgICAgLy8gcmlnaHQgYXdheS4gSnVzdCB3YW50IHRvIHNlZSBwZXJmb3JtYW5jZSBmaXJzdC5cbiAgICAgICAgICBkeCA9IChNYXRoLnJhbmRvbSgpIC0gMC41KSAvIDUwO1xuICAgICAgICAgIGR5ID0gKE1hdGgucmFuZG9tKCkgLSAwLjUpIC8gNTA7XG4gICAgICAgICAgciA9IE1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgcyAvIHIgPCDOuCwgdHJlYXQgdGhpcyBpbnRlcm5hbCBub2RlIGFzIGEgc2luZ2xlIGJvZHksIGFuZCBjYWxjdWxhdGUgdGhlXG4gICAgICAgIC8vIGZvcmNlIGl0IGV4ZXJ0cyBvbiBzb3VyY2VCb2R5LCBhbmQgYWRkIHRoaXMgYW1vdW50IHRvIHNvdXJjZUJvZHkncyBuZXQgZm9yY2UuXG4gICAgICAgIGlmICgobm9kZS5yaWdodCAtIG5vZGUubGVmdCkgLyByIDwgdGhldGEpIHtcbiAgICAgICAgICAvLyBpbiB0aGUgaWYgc3RhdGVtZW50IGFib3ZlIHdlIGNvbnNpZGVyIG5vZGUncyB3aWR0aCBvbmx5XG4gICAgICAgICAgLy8gYmVjYXVzZSB0aGUgcmVnaW9uIHdhcyBzcXVhcmlmaWVkIGR1cmluZyB0cmVlIGNyZWF0aW9uLlxuICAgICAgICAgIC8vIFRodXMgdGhlcmUgaXMgbm8gZGlmZmVyZW5jZSBiZXR3ZWVuIHVzaW5nIHdpZHRoIG9yIGhlaWdodC5cbiAgICAgICAgICB2ID0gZ3Jhdml0eSAqIG5vZGUubWFzcyAqIHNvdXJjZUJvZHkubWFzcyAvIChyICogciAqIHIpO1xuICAgICAgICAgIGZ4ICs9IHYgKiBkeDtcbiAgICAgICAgICBmeSArPSB2ICogZHk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gT3RoZXJ3aXNlLCBydW4gdGhlIHByb2NlZHVyZSByZWN1cnNpdmVseSBvbiBlYWNoIG9mIHRoZSBjdXJyZW50IG5vZGUncyBjaGlsZHJlbi5cblxuICAgICAgICAgIC8vIEkgaW50ZW50aW9uYWxseSB1bmZvbGRlZCB0aGlzIGxvb3AsIHRvIHNhdmUgc2V2ZXJhbCBDUFUgY3ljbGVzLlxuICAgICAgICAgIGlmIChub2RlLnF1YWQwKSB7XG4gICAgICAgICAgICBxdWV1ZVtwdXNoSWR4XSA9IG5vZGUucXVhZDA7XG4gICAgICAgICAgICBxdWV1ZUxlbmd0aCArPSAxO1xuICAgICAgICAgICAgcHVzaElkeCArPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobm9kZS5xdWFkMSkge1xuICAgICAgICAgICAgcXVldWVbcHVzaElkeF0gPSBub2RlLnF1YWQxO1xuICAgICAgICAgICAgcXVldWVMZW5ndGggKz0gMTtcbiAgICAgICAgICAgIHB1c2hJZHggKz0gMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG5vZGUucXVhZDIpIHtcbiAgICAgICAgICAgIHF1ZXVlW3B1c2hJZHhdID0gbm9kZS5xdWFkMjtcbiAgICAgICAgICAgIHF1ZXVlTGVuZ3RoICs9IDE7XG4gICAgICAgICAgICBwdXNoSWR4ICs9IDE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChub2RlLnF1YWQzKSB7XG4gICAgICAgICAgICBxdWV1ZVtwdXNoSWR4XSA9IG5vZGUucXVhZDM7XG4gICAgICAgICAgICBxdWV1ZUxlbmd0aCArPSAxO1xuICAgICAgICAgICAgcHVzaElkeCArPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHNvdXJjZUJvZHkuZm9yY2UueCArPSBmeDtcbiAgICBzb3VyY2VCb2R5LmZvcmNlLnkgKz0gZnk7XG4gIH1cblxuICBmdW5jdGlvbiBpbnNlcnRCb2RpZXMoYm9kaWVzKSB7XG4gICAgaWYoIGJvZGllcy5sZW5ndGggPT09IDAgKXsgcmV0dXJuOyB9XG5cbiAgICBsZXQgeDEgPSBOdW1iZXIuTUFYX1ZBTFVFLFxuICAgICAgeTEgPSBOdW1iZXIuTUFYX1ZBTFVFLFxuICAgICAgeDIgPSBOdW1iZXIuTUlOX1ZBTFVFLFxuICAgICAgeTIgPSBOdW1iZXIuTUlOX1ZBTFVFLFxuICAgICAgaSxcbiAgICAgIG1heCA9IGJvZGllcy5sZW5ndGg7XG5cbiAgICAvLyBUbyByZWR1Y2UgcXVhZCB0cmVlIGRlcHRoIHdlIGFyZSBsb29raW5nIGZvciBleGFjdCBib3VuZGluZyBib3ggb2YgYWxsIHBhcnRpY2xlcy5cbiAgICBpID0gbWF4O1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGxldCB4ID0gYm9kaWVzW2ldLnBvcy54O1xuICAgICAgbGV0IHkgPSBib2RpZXNbaV0ucG9zLnk7XG4gICAgICBpZiAoeCA8IHgxKSB7XG4gICAgICAgIHgxID0geDtcbiAgICAgIH1cbiAgICAgIGlmICh4ID4geDIpIHtcbiAgICAgICAgeDIgPSB4O1xuICAgICAgfVxuICAgICAgaWYgKHkgPCB5MSkge1xuICAgICAgICB5MSA9IHk7XG4gICAgICB9XG4gICAgICBpZiAoeSA+IHkyKSB7XG4gICAgICAgIHkyID0geTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBTcXVhcmlmeSB0aGUgYm91bmRzLlxuICAgIGxldCBkeCA9IHgyIC0geDEsXG4gICAgICBkeSA9IHkyIC0geTE7XG4gICAgaWYgKGR4ID4gZHkpIHtcbiAgICAgIHkyID0geTEgKyBkeDtcbiAgICB9IGVsc2Uge1xuICAgICAgeDIgPSB4MSArIGR5O1xuICAgIH1cblxuICAgIGN1cnJlbnRJbkNhY2hlID0gMDtcbiAgICByb290ID0gbmV3Tm9kZSgpO1xuICAgIHJvb3QubGVmdCA9IHgxO1xuICAgIHJvb3QucmlnaHQgPSB4MjtcbiAgICByb290LnRvcCA9IHkxO1xuICAgIHJvb3QuYm90dG9tID0geTI7XG5cbiAgICBpID0gbWF4IC0gMTtcbiAgICBpZiAoaSA+PSAwKSB7XG4gICAgICByb290LmJvZHkgPSBib2RpZXNbaV07XG4gICAgfVxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGluc2VydChib2RpZXNbaV0sIHJvb3QpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluc2VydChuZXdCb2R5KSB7XG4gICAgaW5zZXJ0U3RhY2sucmVzZXQoKTtcbiAgICBpbnNlcnRTdGFjay5wdXNoKHJvb3QsIG5ld0JvZHkpO1xuXG4gICAgd2hpbGUgKCFpbnNlcnRTdGFjay5pc0VtcHR5KCkpIHtcbiAgICAgIGxldCBzdGFja0l0ZW0gPSBpbnNlcnRTdGFjay5wb3AoKSxcbiAgICAgICAgbm9kZSA9IHN0YWNrSXRlbS5ub2RlLFxuICAgICAgICBib2R5ID0gc3RhY2tJdGVtLmJvZHk7XG5cbiAgICAgIGlmICghbm9kZS5ib2R5KSB7XG4gICAgICAgIC8vIFRoaXMgaXMgaW50ZXJuYWwgbm9kZS4gVXBkYXRlIHRoZSB0b3RhbCBtYXNzIG9mIHRoZSBub2RlIGFuZCBjZW50ZXItb2YtbWFzcy5cbiAgICAgICAgbGV0IHggPSBib2R5LnBvcy54O1xuICAgICAgICBsZXQgeSA9IGJvZHkucG9zLnk7XG4gICAgICAgIG5vZGUubWFzcyA9IG5vZGUubWFzcyArIGJvZHkubWFzcztcbiAgICAgICAgbm9kZS5tYXNzWCA9IG5vZGUubWFzc1ggKyBib2R5Lm1hc3MgKiB4O1xuICAgICAgICBub2RlLm1hc3NZID0gbm9kZS5tYXNzWSArIGJvZHkubWFzcyAqIHk7XG5cbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgaW5zZXJ0IHRoZSBib2R5IGluIHRoZSBhcHByb3ByaWF0ZSBxdWFkcmFudC5cbiAgICAgICAgLy8gQnV0IGZpcnN0IGZpbmQgdGhlIGFwcHJvcHJpYXRlIHF1YWRyYW50LlxuICAgICAgICBsZXQgcXVhZElkeCA9IDAsIC8vIEFzc3VtZSB3ZSBhcmUgaW4gdGhlIDAncyBxdWFkLlxuICAgICAgICAgIGxlZnQgPSBub2RlLmxlZnQsXG4gICAgICAgICAgcmlnaHQgPSAobm9kZS5yaWdodCArIGxlZnQpIC8gMixcbiAgICAgICAgICB0b3AgPSBub2RlLnRvcCxcbiAgICAgICAgICBib3R0b20gPSAobm9kZS5ib3R0b20gKyB0b3ApIC8gMjtcblxuICAgICAgICBpZiAoeCA+IHJpZ2h0KSB7IC8vIHNvbWV3aGVyZSBpbiB0aGUgZWFzdGVybiBwYXJ0LlxuICAgICAgICAgIHF1YWRJZHggPSBxdWFkSWR4ICsgMTtcbiAgICAgICAgICBsZWZ0ID0gcmlnaHQ7XG4gICAgICAgICAgcmlnaHQgPSBub2RlLnJpZ2h0O1xuICAgICAgICB9XG4gICAgICAgIGlmICh5ID4gYm90dG9tKSB7IC8vIGFuZCBpbiBzb3V0aC5cbiAgICAgICAgICBxdWFkSWR4ID0gcXVhZElkeCArIDI7XG4gICAgICAgICAgdG9wID0gYm90dG9tO1xuICAgICAgICAgIGJvdHRvbSA9IG5vZGUuYm90dG9tO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGNoaWxkID0gZ2V0Q2hpbGQobm9kZSwgcXVhZElkeCk7XG4gICAgICAgIGlmICghY2hpbGQpIHtcbiAgICAgICAgICAvLyBUaGUgbm9kZSBpcyBpbnRlcm5hbCBidXQgdGhpcyBxdWFkcmFudCBpcyBub3QgdGFrZW4uIEFkZFxuICAgICAgICAgIC8vIHN1Ym5vZGUgdG8gaXQuXG4gICAgICAgICAgY2hpbGQgPSBuZXdOb2RlKCk7XG4gICAgICAgICAgY2hpbGQubGVmdCA9IGxlZnQ7XG4gICAgICAgICAgY2hpbGQudG9wID0gdG9wO1xuICAgICAgICAgIGNoaWxkLnJpZ2h0ID0gcmlnaHQ7XG4gICAgICAgICAgY2hpbGQuYm90dG9tID0gYm90dG9tO1xuICAgICAgICAgIGNoaWxkLmJvZHkgPSBib2R5O1xuXG4gICAgICAgICAgc2V0Q2hpbGQobm9kZSwgcXVhZElkeCwgY2hpbGQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGNvbnRpbnVlIHNlYXJjaGluZyBpbiB0aGlzIHF1YWRyYW50LlxuICAgICAgICAgIGluc2VydFN0YWNrLnB1c2goY2hpbGQsIGJvZHkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBXZSBhcmUgdHJ5aW5nIHRvIGFkZCB0byB0aGUgbGVhZiBub2RlLlxuICAgICAgICAvLyBXZSBoYXZlIHRvIGNvbnZlcnQgY3VycmVudCBsZWFmIGludG8gaW50ZXJuYWwgbm9kZVxuICAgICAgICAvLyBhbmQgY29udGludWUgYWRkaW5nIHR3byBub2Rlcy5cbiAgICAgICAgbGV0IG9sZEJvZHkgPSBub2RlLmJvZHk7XG4gICAgICAgIG5vZGUuYm9keSA9IG51bGw7IC8vIGludGVybmFsIG5vZGVzIGRvIG5vdCBjYXJ5IGJvZGllc1xuXG4gICAgICAgIGlmIChpc1NhbWVQb3NpdGlvbihvbGRCb2R5LnBvcywgYm9keS5wb3MpKSB7XG4gICAgICAgICAgLy8gUHJldmVudCBpbmZpbml0ZSBzdWJkaXZpc2lvbiBieSBidW1waW5nIG9uZSBub2RlXG4gICAgICAgICAgLy8gYW55d2hlcmUgaW4gdGhpcyBxdWFkcmFudFxuICAgICAgICAgIGxldCByZXRyaWVzQ291bnQgPSAzO1xuICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgIGxldCBvZmZzZXQgPSBNYXRoLnJhbmRvbSgpO1xuICAgICAgICAgICAgbGV0IGR4ID0gKG5vZGUucmlnaHQgLSBub2RlLmxlZnQpICogb2Zmc2V0O1xuICAgICAgICAgICAgbGV0IGR5ID0gKG5vZGUuYm90dG9tIC0gbm9kZS50b3ApICogb2Zmc2V0O1xuXG4gICAgICAgICAgICBvbGRCb2R5LnBvcy54ID0gbm9kZS5sZWZ0ICsgZHg7XG4gICAgICAgICAgICBvbGRCb2R5LnBvcy55ID0gbm9kZS50b3AgKyBkeTtcbiAgICAgICAgICAgIHJldHJpZXNDb3VudCAtPSAxO1xuICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHdlIGRvbid0IGJ1bXAgaXQgb3V0IG9mIHRoZSBib3guIElmIHdlIGRvLCBuZXh0IGl0ZXJhdGlvbiBzaG91bGQgZml4IGl0XG4gICAgICAgICAgfSB3aGlsZSAocmV0cmllc0NvdW50ID4gMCAmJiBpc1NhbWVQb3NpdGlvbihvbGRCb2R5LnBvcywgYm9keS5wb3MpKTtcblxuICAgICAgICAgIGlmIChyZXRyaWVzQ291bnQgPT09IDAgJiYgaXNTYW1lUG9zaXRpb24ob2xkQm9keS5wb3MsIGJvZHkucG9zKSkge1xuICAgICAgICAgICAgLy8gVGhpcyBpcyB2ZXJ5IGJhZCwgd2UgcmFuIG91dCBvZiBwcmVjaXNpb24uXG4gICAgICAgICAgICAvLyBpZiB3ZSBkbyBub3QgcmV0dXJuIGZyb20gdGhlIG1ldGhvZCB3ZSdsbCBnZXQgaW50b1xuICAgICAgICAgICAgLy8gaW5maW5pdGUgbG9vcCBoZXJlLiBTbyB3ZSBzYWNyaWZpY2UgY29ycmVjdG5lc3Mgb2YgbGF5b3V0LCBhbmQga2VlcCB0aGUgYXBwIHJ1bm5pbmdcbiAgICAgICAgICAgIC8vIE5leHQgbGF5b3V0IGl0ZXJhdGlvbiBzaG91bGQgZ2V0IGxhcmdlciBib3VuZGluZyBib3ggaW4gdGhlIGZpcnN0IHN0ZXAgYW5kIGZpeCB0aGlzXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIE5leHQgaXRlcmF0aW9uIHNob3VsZCBzdWJkaXZpZGUgbm9kZSBmdXJ0aGVyLlxuICAgICAgICBpbnNlcnRTdGFjay5wdXNoKG5vZGUsIG9sZEJvZHkpO1xuICAgICAgICBpbnNlcnRTdGFjay5wdXNoKG5vZGUsIGJvZHkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgaW5zZXJ0Qm9kaWVzOiBpbnNlcnRCb2RpZXMsXG4gICAgdXBkYXRlQm9keUZvcmNlOiB1cGRhdGVcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0Q2hpbGQobm9kZSwgaWR4KSB7XG4gIGlmIChpZHggPT09IDApIHJldHVybiBub2RlLnF1YWQwO1xuICBpZiAoaWR4ID09PSAxKSByZXR1cm4gbm9kZS5xdWFkMTtcbiAgaWYgKGlkeCA9PT0gMikgcmV0dXJuIG5vZGUucXVhZDI7XG4gIGlmIChpZHggPT09IDMpIHJldHVybiBub2RlLnF1YWQzO1xuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gc2V0Q2hpbGQobm9kZSwgaWR4LCBjaGlsZCkge1xuICBpZiAoaWR4ID09PSAwKSBub2RlLnF1YWQwID0gY2hpbGQ7XG4gIGVsc2UgaWYgKGlkeCA9PT0gMSkgbm9kZS5xdWFkMSA9IGNoaWxkO1xuICBlbHNlIGlmIChpZHggPT09IDIpIG5vZGUucXVhZDIgPSBjaGlsZDtcbiAgZWxzZSBpZiAoaWR4ID09PSAzKSBub2RlLnF1YWQzID0gY2hpbGQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0geyBtYWtlUXVhZHRyZWUgfTtcbiIsImNvbnN0IGFzc2lnbiA9IHJlcXVpcmUoJy4uL2Fzc2lnbicpO1xuXG5sZXQgc2V0SW5pdGlhbFBvc2l0aW9uU3RhdGUgPSBmdW5jdGlvbiggbm9kZSwgc3RhdGUgKXtcbiAgbGV0IHAgPSBub2RlLnBvc2l0aW9uKCk7XG4gIGxldCBiYiA9IHN0YXRlLmN1cnJlbnRCb3VuZGluZ0JveDtcbiAgbGV0IHNjcmF0Y2ggPSBub2RlLnNjcmF0Y2goIHN0YXRlLm5hbWUgKTtcblxuICBpZiggc2NyYXRjaCA9PSBudWxsICl7XG4gICAgc2NyYXRjaCA9IHt9O1xuXG4gICAgbm9kZS5zY3JhdGNoKCBzdGF0ZS5uYW1lLCBzY3JhdGNoICk7XG4gIH1cblxuICBhc3NpZ24oIHNjcmF0Y2gsIHN0YXRlLnJhbmRvbWl6ZSA/IHtcbiAgICB4OiBiYi54MSArIE1hdGgucmFuZG9tKCkgKiBiYi53LFxuICAgIHk6IGJiLnkxICsgTWF0aC5yYW5kb20oKSAqIGJiLmhcbiAgfSA6IHtcbiAgICB4OiBwLngsXG4gICAgeTogcC55XG4gIH0gKTtcblxuICBzY3JhdGNoLmxvY2tlZCA9IG5vZGUubG9ja2VkKCk7XG59O1xuXG5sZXQgZ2V0Tm9kZVBvc2l0aW9uRGF0YSA9IGZ1bmN0aW9uKCBub2RlLCBzdGF0ZSApe1xuICByZXR1cm4gbm9kZS5zY3JhdGNoKCBzdGF0ZS5uYW1lICk7XG59O1xuXG5sZXQgcmVmcmVzaFBvc2l0aW9ucyA9IGZ1bmN0aW9uKCBub2Rlcywgc3RhdGUgKXtcbiAgbm9kZXMucG9zaXRpb25zKGZ1bmN0aW9uKCBub2RlICl7XG4gICAgbGV0IHNjcmF0Y2ggPSBub2RlLnNjcmF0Y2goIHN0YXRlLm5hbWUgKTtcblxuICAgIHJldHVybiB7XG4gICAgICB4OiBzY3JhdGNoLngsXG4gICAgICB5OiBzY3JhdGNoLnlcbiAgICB9O1xuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0geyBzZXRJbml0aWFsUG9zaXRpb25TdGF0ZSwgZ2V0Tm9kZVBvc2l0aW9uRGF0YSwgcmVmcmVzaFBvc2l0aW9ucyB9O1xuIiwiY29uc3QgZGVmYXVsdHMgPSBPYmplY3QuZnJlZXplKHtcbiAgcG9zOiB7IHg6IDAsIHk6IDAgfSxcbiAgcHJldlBvczogeyB4OiAwLCB5OiAwIH0sXG4gIGZvcmNlOiB7IHg6IDAsIHk6IDAgfSxcbiAgdmVsb2NpdHk6IHsgeDogMCwgeTogMCB9LFxuICBtYXNzOiAxXG59KTtcblxuY29uc3QgY29weVZlYyA9IHYgPT4gKHsgeDogdi54LCB5OiB2LnkgfSk7XG5jb25zdCBnZXRWYWx1ZSA9ICggdmFsLCBkZWYgKSA9PiB2YWwgIT0gbnVsbCA/IHZhbCA6IGRlZjtcbmNvbnN0IGdldFZlYyA9ICggdmVjLCBkZWYgKSA9PiBjb3B5VmVjKCBnZXRWYWx1ZSggdmVjLCBkZWYgKSApO1xuXG5mdW5jdGlvbiBtYWtlQm9keSggb3B0cyApe1xuICBsZXQgYiA9IHt9O1xuXG4gIGIucG9zID0gZ2V0VmVjKCBvcHRzLnBvcywgZGVmYXVsdHMucG9zICk7XG4gIGIucHJldlBvcyA9IGdldFZlYyggb3B0cy5wcmV2UG9zLCBiLnBvcyApO1xuICBiLmZvcmNlID0gZ2V0VmVjKCBvcHRzLmZvcmNlLCBkZWZhdWx0cy5mb3JjZSApO1xuICBiLnZlbG9jaXR5ID0gZ2V0VmVjKCBvcHRzLnZlbG9jaXR5LCBkZWZhdWx0cy52ZWxvY2l0eSApO1xuICBiLm1hc3MgPSBvcHRzLm1hc3MgIT0gbnVsbCA/IG9wdHMubWFzcyA6IGRlZmF1bHRzLm1hc3M7XG4gIGIubG9ja2VkID0gb3B0cy5sb2NrZWQ7XG5cbiAgcmV0dXJuIGI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0geyBtYWtlQm9keSB9O1xuIiwiY29uc3QgeyBpbnRlZ3JhdGUgfSA9IHJlcXVpcmUoJy4vaW50ZWdyYXRlJyk7XG5jb25zdCB7IGFwcGx5RHJhZyB9ID0gcmVxdWlyZSgnLi9kcmFnJyk7XG5jb25zdCB7IGFwcGx5U3ByaW5nIH0gPSByZXF1aXJlKCcuL3NwcmluZycpO1xuXG5mdW5jdGlvbiB0aWNrKHsgYm9kaWVzLCBzcHJpbmdzLCBxdWFkdHJlZSwgdGltZVN0ZXAsIGdyYXZpdHksIHRoZXRhLCBkcmFnQ29lZmYsIHB1bGwgfSl7XG4gIC8vIHVwZGF0ZSBib2R5IGZyb20gc2NyYXRjaCBpbiBjYXNlIG9mIGFueSBjaGFuZ2VzXG4gIGJvZGllcy5mb3JFYWNoKCBib2R5ID0+IHtcbiAgICBsZXQgcCA9IGJvZHkuX3NjcmF0Y2g7XG5cbiAgICBpZiggIXAgKXsgcmV0dXJuOyB9XG5cbiAgICBib2R5LmxvY2tlZCA9IHAubG9ja2VkO1xuICAgIGJvZHkuZ3JhYmJlZCA9IHAuZ3JhYmJlZDtcbiAgICBib2R5LnBvcy54ID0gcC54O1xuICAgIGJvZHkucG9zLnkgPSBwLnk7XG4gIH0gKTtcblxuICBxdWFkdHJlZS5pbnNlcnRCb2RpZXMoIGJvZGllcyApO1xuXG4gIGZvciggbGV0IGkgPSAwOyBpIDwgYm9kaWVzLmxlbmd0aDsgaSsrICl7XG4gICAgbGV0IGJvZHkgPSBib2RpZXNbaV07XG5cbiAgICBxdWFkdHJlZS51cGRhdGVCb2R5Rm9yY2UoIGJvZHksIGdyYXZpdHksIHRoZXRhLCBwdWxsICk7XG4gICAgYXBwbHlEcmFnKCBib2R5LCBkcmFnQ29lZmYgKTtcbiAgfVxuXG4gIGZvciggbGV0IGkgPSAwOyBpIDwgc3ByaW5ncy5sZW5ndGg7IGkrKyApe1xuICAgIGxldCBzcHJpbmcgPSBzcHJpbmdzW2ldO1xuXG4gICAgYXBwbHlTcHJpbmcoIHNwcmluZyApO1xuICB9XG5cbiAgbGV0IG1vdmVtZW50ID0gaW50ZWdyYXRlKCBib2RpZXMsIHRpbWVTdGVwICk7XG5cbiAgLy8gdXBkYXRlIHNjcmF0Y2ggcG9zaXRpb25zIGZyb20gYm9keSBwb3NpdGlvbnNcbiAgYm9kaWVzLmZvckVhY2goIGJvZHkgPT4ge1xuICAgIGxldCBwID0gYm9keS5fc2NyYXRjaDtcblxuICAgIGlmKCAhcCApeyByZXR1cm47IH1cblxuICAgIHAueCA9IGJvZHkucG9zLng7XG4gICAgcC55ID0gYm9keS5wb3MueTtcbiAgfSApO1xuXG4gIHJldHVybiBtb3ZlbWVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7IHRpY2sgfTtcbiIsImNvbnN0IG5vcCA9IGZ1bmN0aW9uKCl7fTtcblxubGV0IHRpY2sgPSBmdW5jdGlvbiggc3RhdGUgKXtcbiAgbGV0IHMgPSBzdGF0ZTtcbiAgbGV0IGwgPSBzdGF0ZS5sYXlvdXQ7XG5cbiAgbGV0IHRpY2tJbmRpY2F0ZXNEb25lID0gbC50aWNrKCBzICk7XG5cbiAgaWYoIHMuZmlyc3RVcGRhdGUgKXtcbiAgICBpZiggcy5hbmltYXRlQ29udGludW91c2x5ICl7IC8vIGluZGljYXRlIHRoZSBpbml0aWFsIHBvc2l0aW9ucyBoYXZlIGJlZW4gc2V0XG4gICAgICBzLmxheW91dC5lbWl0KCdsYXlvdXRyZWFkeScpO1xuICAgIH1cbiAgICBzLmZpcnN0VXBkYXRlID0gZmFsc2U7XG4gIH1cblxuICBzLnRpY2tJbmRleCsrO1xuXG4gIGxldCBkdXJhdGlvbiA9IERhdGUubm93KCkgLSBzLnN0YXJ0VGltZTtcblxuICByZXR1cm4gIXMuaW5maW5pdGUgJiYgKCB0aWNrSW5kaWNhdGVzRG9uZSB8fCBzLnRpY2tJbmRleCA+PSBzLm1heEl0ZXJhdGlvbnMgfHwgZHVyYXRpb24gPj0gcy5tYXhTaW11bGF0aW9uVGltZSApO1xufTtcblxubGV0IG11bHRpdGljayA9IGZ1bmN0aW9uKCBzdGF0ZSwgb25Ob3REb25lID0gbm9wLCBvbkRvbmUgPSBub3AgKXtcbiAgbGV0IGRvbmUgPSBmYWxzZTtcbiAgbGV0IHMgPSBzdGF0ZTtcblxuICBmb3IoIGxldCBpID0gMDsgaSA8IHMucmVmcmVzaDsgaSsrICl7XG4gICAgZG9uZSA9ICFzLnJ1bm5pbmcgfHwgdGljayggcyApO1xuXG4gICAgaWYoIGRvbmUgKXsgYnJlYWs7IH1cbiAgfVxuXG4gIGlmKCAhZG9uZSApe1xuICAgIG9uTm90RG9uZSgpO1xuICB9IGVsc2Uge1xuICAgIG9uRG9uZSgpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHsgdGljaywgbXVsdGl0aWNrIH07XG4iLCJjb25zdCBkZWZhdWx0cyA9IE9iamVjdC5mcmVlemUoe1xuICAvLyBUaGUgaWRlYWwgbGVndGggb2YgYSBzcHJpbmdcbiAgLy8gLSBUaGlzIGFjdHMgYXMgYSBoaW50IGZvciB0aGUgZWRnZSBsZW5ndGhcbiAgLy8gLSBUaGUgZWRnZSBsZW5ndGggY2FuIGJlIGxvbmdlciBvciBzaG9ydGVyIGlmIHRoZSBmb3JjZXMgYXJlIHNldCB0byBleHRyZW1lIHZhbHVlc1xuICBzcHJpbmdMZW5ndGg6IGVkZ2UgPT4gODAsXG5cbiAgLy8gSG9va2UncyBsYXcgY29lZmZpY2llbnRcbiAgLy8gLSBUaGUgdmFsdWUgcmFuZ2VzIG9uIFswLCAxXVxuICAvLyAtIExvd2VyIHZhbHVlcyBnaXZlIGxvb3NlciBzcHJpbmdzXG4gIC8vIC0gSGlnaGVyIHZhbHVlcyBnaXZlIHRpZ2h0ZXIgc3ByaW5nc1xuICBzcHJpbmdDb2VmZjogZWRnZSA9PiAwLjAwMDgsXG5cbiAgLy8gVGhlIG1hc3Mgb2YgdGhlIG5vZGUgaW4gdGhlIHBoeXNpY3Mgc2ltdWxhdGlvblxuICAvLyAtIFRoZSBtYXNzIGFmZmVjdHMgdGhlIGdyYXZpdHkgbm9kZSByZXB1bHNpb24vYXR0cmFjdGlvblxuICBtYXNzOiBub2RlID0+IDQsXG5cbiAgLy8gQ291bG9tYidzIGxhdyBjb2VmZmljaWVudFxuICAvLyAtIE1ha2VzIHRoZSBub2RlcyByZXBlbCBlYWNoIG90aGVyIGZvciBuZWdhdGl2ZSB2YWx1ZXNcbiAgLy8gLSBNYWtlcyB0aGUgbm9kZXMgYXR0cmFjdCBlYWNoIG90aGVyIGZvciBwb3NpdGl2ZSB2YWx1ZXNcbiAgZ3Jhdml0eTogLTEuMixcblxuICAvLyBBIGZvcmNlIHRoYXQgcHVsbHMgbm9kZXMgdG93YXJkcyB0aGUgb3JpZ2luICgwLCAwKVxuICAvLyBIaWdoZXIgdmFsdWVzIGtlZXAgdGhlIGNvbXBvbmVudHMgbGVzcyBzcHJlYWQgb3V0XG4gIHB1bGw6IDAuMDAxLFxuXG4gIC8vIFRoZXRhIGNvZWZmaWNpZW50IGZyb20gQmFybmVzLUh1dCBzaW11bGF0aW9uXG4gIC8vIC0gVmFsdWUgcmFuZ2VzIG9uIFswLCAxXVxuICAvLyAtIFBlcmZvcm1hbmNlIGlzIGJldHRlciB3aXRoIHNtYWxsZXIgdmFsdWVzXG4gIC8vIC0gVmVyeSBzbWFsbCB2YWx1ZXMgbWF5IG5vdCBjcmVhdGUgZW5vdWdoIGZvcmNlIHRvIGdpdmUgYSBnb29kIHJlc3VsdFxuICB0aGV0YTogMC42NjYsXG5cbiAgLy8gRnJpY3Rpb24gLyBkcmFnIGNvZWZmaWNpZW50IHRvIG1ha2UgdGhlIHN5c3RlbSBzdGFiaWxpc2Ugb3ZlciB0aW1lXG4gIGRyYWdDb2VmZjogMC4wMixcblxuICAvLyBXaGVuIHRoZSB0b3RhbCBvZiB0aGUgc3F1YXJlZCBwb3NpdGlvbiBkZWx0YXMgaXMgbGVzcyB0aGFuIHRoaXMgdmFsdWUsIHRoZSBzaW11bGF0aW9uIGVuZHNcbiAgbW92ZW1lbnRUaHJlc2hvbGQ6IDEsXG5cbiAgLy8gVGhlIGFtb3VudCBvZiB0aW1lIHBhc3NlZCBwZXIgdGlja1xuICAvLyAtIExhcmdlciB2YWx1ZXMgcmVzdWx0IGluIGZhc3RlciBydW50aW1lcyBidXQgbWlnaHQgc3ByZWFkIHRoaW5ncyBvdXQgdG9vIGZhclxuICAvLyAtIFNtYWxsZXIgdmFsdWVzIHByb2R1Y2UgbW9yZSBhY2N1cmF0ZSByZXN1bHRzXG4gIHRpbWVTdGVwOiAyMFxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmYXVsdHM7XG4iLCJjb25zdCBhc3NpZ24gPSByZXF1aXJlKCcuLi9hc3NpZ24nKTtcblxuY29uc3QgZGVmYXVsdHMgPSBPYmplY3QuZnJlZXplKHtcbiAgc291cmNlOiBudWxsLFxuICB0YXJnZXQ6IG51bGwsXG4gIGxlbmd0aDogODAsXG4gIGNvZWZmOiAwLjAwMDIsXG4gIHdlaWdodDogMVxufSk7XG5cbmZ1bmN0aW9uIG1ha2VTcHJpbmcoIHNwcmluZyApe1xuICByZXR1cm4gYXNzaWduKCB7fSwgZGVmYXVsdHMsIHNwcmluZyApO1xufVxuXG5mdW5jdGlvbiBhcHBseVNwcmluZyggc3ByaW5nICl7XG4gIGxldCBib2R5MSA9IHNwcmluZy5zb3VyY2UsXG4gICAgICBib2R5MiA9IHNwcmluZy50YXJnZXQsXG4gICAgICBsZW5ndGggPSBzcHJpbmcubGVuZ3RoIDwgMCA/IGRlZmF1bHRzLmxlbmd0aCA6IHNwcmluZy5sZW5ndGgsXG4gICAgICBkeCA9IGJvZHkyLnBvcy54IC0gYm9keTEucG9zLngsXG4gICAgICBkeSA9IGJvZHkyLnBvcy55IC0gYm9keTEucG9zLnksXG4gICAgICByID0gTWF0aC5zcXJ0KGR4ICogZHggKyBkeSAqIGR5KTtcblxuICBpZiAociA9PT0gMCkge1xuICAgICAgZHggPSAoTWF0aC5yYW5kb20oKSAtIDAuNSkgLyA1MDtcbiAgICAgIGR5ID0gKE1hdGgucmFuZG9tKCkgLSAwLjUpIC8gNTA7XG4gICAgICByID0gTWF0aC5zcXJ0KGR4ICogZHggKyBkeSAqIGR5KTtcbiAgfVxuXG4gIGxldCBkID0gciAtIGxlbmd0aDtcbiAgbGV0IGNvZWZmID0gKCghc3ByaW5nLmNvZWZmIHx8IHNwcmluZy5jb2VmZiA8IDApID8gZGVmYXVsdHMuc3ByaW5nQ29lZmYgOiBzcHJpbmcuY29lZmYpICogZCAvIHIgKiBzcHJpbmcud2VpZ2h0O1xuXG4gIGJvZHkxLmZvcmNlLnggKz0gY29lZmYgKiBkeDtcbiAgYm9keTEuZm9yY2UueSArPSBjb2VmZiAqIGR5O1xuXG4gIGJvZHkyLmZvcmNlLnggLT0gY29lZmYgKiBkeDtcbiAgYm9keTIuZm9yY2UueSAtPSBjb2VmZiAqIGR5O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHsgbWFrZVNwcmluZywgYXBwbHlTcHJpbmcgfTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oIGJiLCBjeSApe1xuICBpZiggYmIgPT0gbnVsbCApe1xuICAgIGJiID0geyB4MTogMCwgeTE6IDAsIHc6IGN5LndpZHRoKCksIGg6IGN5LmhlaWdodCgpIH07XG4gIH0gZWxzZSB7IC8vIGNvcHlcbiAgICBiYiA9IHsgeDE6IGJiLngxLCB4MjogYmIueDIsIHkxOiBiYi55MSwgeTI6IGJiLnkyLCB3OiBiYi53LCBoOiBiYi5oIH07XG4gIH1cblxuICBpZiggYmIueDIgPT0gbnVsbCApeyBiYi54MiA9IGJiLngxICsgYmIudzsgfVxuICBpZiggYmIudyA9PSBudWxsICl7IGJiLncgPSBiYi54MiAtIGJiLngxOyB9XG4gIGlmKCBiYi55MiA9PSBudWxsICl7IGJiLnkyID0gYmIueTEgKyBiYi5oOyB9XG4gIGlmKCBiYi5oID09IG51bGwgKXsgYmIuaCA9IGJiLnkyIC0gYmIueTE7IH1cblxuICByZXR1cm4gYmI7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuYXNzaWduICE9IG51bGwgPyBPYmplY3QuYXNzaWduLmJpbmQoIE9iamVjdCApIDogZnVuY3Rpb24oIHRndCwgLi4uc3JjcyApe1xuICBzcmNzLmZvckVhY2goIHNyYyA9PiB7XG4gICAgT2JqZWN0LmtleXMoIHNyYyApLmZvckVhY2goIGsgPT4gdGd0W2tdID0gc3JjW2tdICk7XG4gIH0gKTtcblxuICByZXR1cm4gdGd0O1xufTtcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8vIFRoaXMgZW50cnkgbW9kdWxlIGlzIHJlZmVyZW5jZWQgYnkgb3RoZXIgbW9kdWxlcyBzbyBpdCBjYW4ndCBiZSBpbmxpbmVkXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNDQpO1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJPYmplY3QiLCJmcmVlemUiLCJhbmltYXRlIiwicmVmcmVzaCIsIm1heEl0ZXJhdGlvbnMiLCJtYXhTaW11bGF0aW9uVGltZSIsInVuZ3JhYmlmeVdoaWxlU2ltdWxhdGluZyIsImZpdCIsInBhZGRpbmciLCJib3VuZGluZ0JveCIsInVuZGVmaW5lZCIsInJlYWR5Iiwic3RvcCIsInJhbmRvbWl6ZSIsImluZmluaXRlIiwiRXVsZXIiLCJyZWdpc3RlciIsImN5dG9zY2FwZSIsInRoaXMiLCJib2R5IiwicXVhZDAiLCJxdWFkMSIsInF1YWQyIiwicXVhZDMiLCJtYXNzIiwibWFzc1giLCJtYXNzWSIsImxlZnQiLCJ0b3AiLCJib3R0b20iLCJyaWdodCIsImFwcGx5RHJhZyIsIm1hbnVhbERyYWdDb2VmZiIsImRyYWdDb2VmZiIsImZvcmNlIiwieCIsInZlbG9jaXR5IiwieSIsImFzc2lnbiIsImRlZmF1bHRzIiwibWFrZUJvdW5kaW5nQm94Iiwic2V0SW5pdGlhbFBvc2l0aW9uU3RhdGUiLCJyZWZyZXNoUG9zaXRpb25zIiwiZ2V0Tm9kZVBvc2l0aW9uRGF0YSIsIm11bHRpdGljayIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsIm8iLCJub2RlcyIsImVsZXMiLCJzb3J0IiwiYSIsImIiLCJwb3NpdGlvbiIsInByZXYiLCJwb3MiLCJmb3JFYWNoIiwibiIsIk1hdGgiLCJhYnMiLCJ0aGV0YSIsInJhbmRvbSIsInMiLCJzdGF0ZSIsImxheW91dCIsImVkZ2VzIiwidGlja0luZGV4IiwiZmlyc3RVcGRhdGUiLCJhbmltYXRlRW5kIiwiYW5pbWF0ZUNvbnRpbnVvdXNseSIsInJ1biIsImwiLCJzdGFydFRpbWUiLCJEYXRlIiwibm93IiwicnVubmluZyIsImN1cnJlbnRCb3VuZGluZ0JveCIsImN5Iiwib25lIiwicHJlcnVuIiwidW5ncmFiaWZ5Iiwibm9kZSIsImdyYWJiYWJsZSIsInJlZ3JhYmlmeSIsImdyYWJpZnkiLCJ1cGRhdGVHcmFiU3RhdGUiLCJncmFiYmVkIiwib25HcmFiIiwidGFyZ2V0Iiwib25GcmVlIiwib25EcmFnIiwicCIsInRwIiwibGlzdGVuVG9HcmFiIiwib24iLCJ1bmxpc3RlblRvR3JhYiIsInJlbW92ZUxpc3RlbmVyIiwib25Ob3REb25lIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiZnJhbWUiLCJvbkRvbmUiLCJlbWl0IiwiZG9uZSIsImxheW91dFBvc2l0aW9ucyIsInBkIiwicG9zdHJ1biIsInRpY2siLCJkZXN0cm95IiwiTGF5b3V0IiwibWFrZVF1YWR0cmVlIiwibWFrZUJvZHkiLCJtYWtlU3ByaW5nIiwiaXNQYXJlbnQiLCJub3RJc1BhcmVudCIsImlzUGFyZW50RWRnZSIsImUiLCJzb3VyY2UiLCJub3RJc1BhcmVudEVkZ2UiLCJnZXRCb2R5Iiwic2NyYXRjaCIsImdldE5vblBhcmVudERlc2NlbmRhbnRzIiwiZGVzY2VuZGFudHMiLCJmaWx0ZXIiLCJnZXRTY3JhdGNoIiwiZWwiLCJvcHRGbiIsIm9wdCIsImVsZSIsInN1cGVyIiwicXVhZHRyZWUiLCJib2RpZXMiLCJsb2NrZWQiLCJfY3lOb2RlIiwiX3NjcmF0Y2giLCJwdXNoIiwic3ByaW5ncyIsInNwcmluZyIsImxlbmd0aCIsInNwcmluZ0xlbmd0aCIsImNvZWZmIiwic3ByaW5nQ29lZmYiLCJfY3lFZGdlIiwic291cmNlcyIsInRhcmdldHMiLCJzcmMiLCJ0Z3QiLCJtb3ZlbWVudFRocmVzaG9sZCIsIkluc2VydFN0YWNrIiwic3RhY2siLCJwb3BJZHgiLCJJbnNlcnRTdGFja0VsZW1lbnQiLCJwcm90b3R5cGUiLCJpc0VtcHR5IiwiaXRlbSIsInBvcCIsInJlc2V0IiwiaW50ZWdyYXRlIiwidGltZVN0ZXAiLCJpIiwiZHgiLCJ0eCIsImR5IiwidHkiLCJtYXgiLCJ2eCIsInZ5IiwidiIsInNxcnQiLCJOb2RlIiwiaXNTYW1lUG9zaXRpb24iLCJwMSIsInAyIiwiZ2V0Q2hpbGQiLCJpZHgiLCJzZXRDaGlsZCIsImNoaWxkIiwidXBkYXRlUXVldWUiLCJpbnNlcnRTdGFjayIsIm5vZGVzQ2FjaGUiLCJjdXJyZW50SW5DYWNoZSIsInJvb3QiLCJuZXdOb2RlIiwiaW5zZXJ0IiwibmV3Qm9keSIsInN0YWNrSXRlbSIsIm9sZEJvZHkiLCJyZXRyaWVzQ291bnQiLCJvZmZzZXQiLCJxdWFkSWR4IiwiaW5zZXJ0Qm9kaWVzIiwieDEiLCJOdW1iZXIiLCJNQVhfVkFMVUUiLCJ5MSIsIngyIiwiTUlOX1ZBTFVFIiwieTIiLCJ1cGRhdGVCb2R5Rm9yY2UiLCJzb3VyY2VCb2R5IiwiZ3Jhdml0eSIsInB1bGwiLCJyIiwicXVldWUiLCJmeCIsImZ5IiwicXVldWVMZW5ndGgiLCJzaGlmdElkeCIsInB1c2hJZHgiLCJyZXNldFZlYyIsInB4IiwicHkiLCJwciIsInB2IiwiZGlmZmVyZW50Qm9keSIsImJiIiwibmFtZSIsInciLCJoIiwicG9zaXRpb25zIiwicHJldlBvcyIsImdldFZlYyIsInZlYyIsImRlZiIsImNvcHlWZWMiLCJ2YWwiLCJnZXRWYWx1ZSIsIm9wdHMiLCJhcHBseVNwcmluZyIsIm1vdmVtZW50Iiwibm9wIiwidGlja0luZGljYXRlc0RvbmUiLCJkdXJhdGlvbiIsImVkZ2UiLCJ3ZWlnaHQiLCJib2R5MSIsImJvZHkyIiwiZCIsIndpZHRoIiwiaGVpZ2h0IiwiYmluZCIsInNyY3MiLCJrZXlzIiwiayIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19leHBvcnRzX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIl0sInNvdXJjZVJvb3QiOiIifQ==